package sealine.restaurant;

import com.toedter.calendar.JDateChooser;
import sealine.DbConnect;
import sealine.MainForm;
import java.awt.Color;
import java.awt.KeyboardFocusManager;
import java.awt.List;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Dell
 */
public class Restaurant_Manager extends javax.swing.JFrame {

    /**
     * Creates new form Restaurant_Manager
     */
    Connection con=null;
    PreparedStatement ps=null;
    ResultSet rs=null;
    
    Calendar now = Calendar.getInstance();
    int month = now.get(Calendar.MONTH); 
    int date = now.get(Calendar.DATE); 
    int year = now.get(Calendar.YEAR);
    String Date = date + " - " + month + " - " + year; 
    
    public Restaurant_Manager() {
        initComponents();
        contentPanel.setVisible(false);
        con=sealine.DbConnect.ConnectDB();
        
        
    }
    
    //variable declarations
    String updateOrderID;
    JComboBox<String> comboBox;
    java.util.List<String> data = new ArrayList<String>();
    String orderdetails[] = new String [20];
    boolean ovalidity = false; //order
    boolean mvalidity = false; //menu
    boolean cvalidity = false; //nic
    boolean dvalidity = false; //date
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane9 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        mainPane = new javax.swing.JDesktopPane();
        contentPanel = new javax.swing.JPanel();
        restaurantOrderPanel = new javax.swing.JPanel();
        addOrderPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menuIdsComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemsList = new javax.swing.JList<>();
        addFoodItemsButton = new javax.swing.JButton();
        removeFoodItemButton = new javax.swing.JButton();
        resetOrderButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        proceedOrderButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        menuItemsScrollPane = new javax.swing.JScrollPane();
        menuItemsTable = new javax.swing.JTable();
        checkTokenCheckBox = new javax.swing.JCheckBox();
        updateOrderPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        searchUpdateOrderIdTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        searchUpdateButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        updateOrderTable = new javax.swing.JTable();
        removeNewFoodItemButton = new javax.swing.JButton();
        addNewFoodItemButton = new javax.swing.JButton();
        menuIdComboBox = new javax.swing.JComboBox<>();
        updateOrderButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        menuIdUpdateLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        orderNewItemsList = new javax.swing.JList<>();
        orderNewItemsScrollPane = new javax.swing.JScrollPane();
        orderNewItemsTable = new javax.swing.JTable();
        removeOrderPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        removeOrderTable = new javax.swing.JTable();
        removeOrderButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        searchRemoveOrderIdTextField = new javax.swing.JTextField();
        searchRemoveButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        resetRemoveButton = new javax.swing.JButton();
        searchOrderPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        searchOrderIdTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        searchOrderNicTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        searchOrderScrollPane = new javax.swing.JScrollPane();
        orderSearchTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        searchOrderReserButton = new javax.swing.JButton();
        customerPanel = new javax.swing.JPanel();
        addCustomerPanel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        customerNicTextField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        customerFNameTextField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        countryCodeTextField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        areaCodeTextField = new javax.swing.JTextField();
        phonePart1TextField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        phonePart2TextField = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        eMailTextField = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        customerLNameTextField = new javax.swing.JTextField();
        goBackToOrderButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        demoAddCustomerButton = new javax.swing.JButton();
        searchCustomerPanel = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        searchCustomerTextField = new javax.swing.JTextField();
        searchCustomerButton = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        searchCustomerTablejScrollPane = new javax.swing.JScrollPane();
        searchCustomerTable = new javax.swing.JTable();
        searchCustomerResetButton = new javax.swing.JButton();
        searchCustomerDemoButton = new javax.swing.JButton();
        updateCustomerPanel = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        searchCustomerToUpdateTextField = new javax.swing.JTextField();
        searchCustomerToUpdateButton = new javax.swing.JButton();
        searchCustomerToUpdateTablejScrollPane = new javax.swing.JScrollPane();
        searchCustomerToUpdateTable = new javax.swing.JTable();
        updateCustomerButton = new javax.swing.JButton();
        jLabel64 = new javax.swing.JLabel();
        searchCustomerToUpdateDemoButton = new javax.swing.JButton();
        searchCustomerToUpdateResetButton = new javax.swing.JButton();
        roomCustomerPanel = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        existingCustomerNicTextField = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        existingCustomerNameTextField = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        addOrderOfExistingCustomerButton = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        orderAmountTextField = new javax.swing.JTextField();
        resetOrderOfExistingCustomerButton = new javax.swing.JButton();
        demoOrderOfExistingCustomerButton = new javax.swing.JButton();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        existingCustomerOrderDescriptionTextArea = new javax.swing.JTextArea();
        existingCustomerOrderMenuIdTextField = new javax.swing.JTextField();
        restaurantPaymentPanel = new javax.swing.JPanel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        paymentMenuIdLabel = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        paymentOrderDescriptionTextArea = new javax.swing.JTextArea();
        paymentMethodComboBox = new javax.swing.JComboBox<>();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        paymentAmountTextField = new javax.swing.JTextField();
        paymentPaidAmountTextField = new javax.swing.JTextField();
        paymentBalanceTextField = new javax.swing.JTextField();
        paymentDoneButton = new javax.swing.JButton();
        printBillButton = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        addMenuPanel = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        newMenuItemsList = new javax.swing.JList<>();
        removeNewMenuItemButton = new javax.swing.JButton();
        addNewMenuItemButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        foodItemsTable = new javax.swing.JTable();
        jLabel33 = new javax.swing.JLabel();
        menuPriceTextField = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        menuDescriptionTextArea = new javax.swing.JTextArea();
        addNewMenuButton = new javax.swing.JButton();
        resetAddNewMenuButton = new javax.swing.JButton();
        updateMenuPanel = new javax.swing.JPanel();
        jLabel57 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        foodItemsToUpdateTable = new javax.swing.JTable();
        addUpdatedMenuItemButton = new javax.swing.JButton();
        jLabel58 = new javax.swing.JLabel();
        jScrollPane16 = new javax.swing.JScrollPane();
        updatedMenuItemsList = new javax.swing.JList<>();
        removeUpdatedMenuItemButton = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        updatedMenuDescriptionTextArea = new javax.swing.JTextArea();
        updatedMenuPriceTextField = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        resetUpdatedMenuButton = new javax.swing.JButton();
        updateMenuButton = new javax.swing.JButton();
        updateMenuMenuIdComboBox = new javax.swing.JComboBox<>();
        jLabel60 = new javax.swing.JLabel();
        removeMenuPanel = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        removeMenuIdComboBox = new javax.swing.JComboBox<>();
        removeMenuSearchButton = new javax.swing.JButton();
        viewMenuPanel = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        viewMenuIdComboBox = new javax.swing.JComboBox<>();
        viewMenuButton = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        viewMenuResetButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewMenuList = new javax.swing.JList<>();
        jLabel65 = new javax.swing.JLabel();
        viewMenuStatusTextField = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        viewMenuPriceTextField = new javax.swing.JTextField();
        otherOrderPanel = new javax.swing.JPanel();
        roomOrderPanel = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        changeStatusOfRoomOrderButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        roomOrdersTable = new javax.swing.JTable();
        roomServiceOrderIdTextField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        viewRoomServiceOrdersButton = new javax.swing.JButton();
        employeePanel = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        employeeIdTextField = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        employeeInfoTable = new javax.swing.JTable();
        searchAllEmployeesButton = new javax.swing.JButton();
        resetEmployeeButton = new javax.swing.JButton();
        searchSingleEmployeeButton = new javax.swing.JButton();
        printEmployeeButton = new javax.swing.JButton();
        orderStockPanel = new javax.swing.JPanel();
        stockOrderPanel = new javax.swing.JPanel();
        jLabel67 = new javax.swing.JLabel();
        itemIdComboBox = new javax.swing.JComboBox<>();
        itemNameComboBox = new javax.swing.JComboBox<>();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        departmentTextField = new javax.swing.JTextField();
        itemCategorycomboBox = new javax.swing.JComboBox<>();
        orderQtyTextField = new javax.swing.JTextField();
        unitsOrderTextField = new javax.swing.JTextField();
        clearRequestButton = new javax.swing.JButton();
        requestStockButton = new javax.swing.JButton();
        maintenancePanel = new javax.swing.JPanel();
        maintenanceRequestPanel = new javax.swing.JPanel();
        reportsPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        restaurantOrderMenu = new javax.swing.JMenu();
        addOrderMenuItem = new javax.swing.JMenuItem();
        updateOrderMenuItem = new javax.swing.JMenuItem();
        removeOrderMenuItem = new javax.swing.JMenuItem();
        searchOrderMenuItem = new javax.swing.JMenuItem();
        customerMenu = new javax.swing.JMenu();
        addCustomerMenuItem = new javax.swing.JMenuItem();
        updateCustomerMenuItem = new javax.swing.JMenuItem();
        searchCustomerMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        addMenuMenuItem = new javax.swing.JMenuItem();
        updateMenuMenuItem = new javax.swing.JMenuItem();
        removeMenuMenuItem = new javax.swing.JMenuItem();
        viewMenuMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        roomOrdersMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        requestStockMenuItem = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        maintenanceMenuItem = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        reportsMenuItem = new javax.swing.JMenuItem();

        jScrollPane9.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainPane.setBackground(new java.awt.Color(255, 255, 255));
        mainPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mainPane.setPreferredSize(new java.awt.Dimension(780, 980));

        contentPanel.setPreferredSize(new java.awt.Dimension(768, 633));

        restaurantOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

        addOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Menu ID");

        menuIdsComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuIdsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Menu ID-" }));
        menuIdsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuIdsComboBoxActionPerformed(evt);
            }
        });

        orderItemsList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(orderItemsList);

        addFoodItemsButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addFoodItemsButton.setText("Add");
        addFoodItemsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodItemsButtonActionPerformed(evt);
            }
        });

        removeFoodItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        removeFoodItemButton.setText("Remove");
        removeFoodItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFoodItemButtonActionPerformed(evt);
            }
        });

        resetOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        resetOrderButton.setText("RESET");
        resetOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetOrderButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Select Order Items");

        proceedOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        proceedOrderButton.setText("NEXT");
        proceedOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedOrderButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("ADD RESTAURANT ORDER");
        jLabel3.setToolTipText("");
        jLabel3.setBorder(new javax.swing.border.MatteBorder(null));

        menuItemsTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ){public boolean isCellEditable(int row, int column){return false;}});

        menuItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuItemsTableMouseClicked(evt);
            }
        });
        menuItemsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                menuItemsTableComponentShown(evt);
            }
        }

    );
    menuItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            menuItemsTableMouseClicked(evt);
        }
    });
    menuItemsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
        public void componentShown(java.awt.event.ComponentEvent evt) {
            menuItemsTableComponentShown(evt);
        }
    });
    menuItemsScrollPane.setViewportView(menuItemsTable);

    checkTokenCheckBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    checkTokenCheckBox.setText("Has Token");

    javax.swing.GroupLayout addOrderPanelLayout = new javax.swing.GroupLayout(addOrderPanel);
    addOrderPanel.setLayout(addOrderPanelLayout);
    addOrderPanelLayout.setHorizontalGroup(
        addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addOrderPanelLayout.createSequentialGroup()
            .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addOrderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(addOrderPanelLayout.createSequentialGroup()
                            .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addOrderPanelLayout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addFoodItemsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeFoodItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)))
                                .addGroup(addOrderPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(checkTokenCheckBox)))
                            .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addOrderPanelLayout.createSequentialGroup()
                                    .addGap(103, 103, 103)
                                    .addComponent(resetOrderButton)
                                    .addGap(55, 55, 55)
                                    .addComponent(proceedOrderButton))
                                .addGroup(addOrderPanelLayout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(menuItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(addOrderPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addOrderPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(42, 42, 42)
                            .addComponent(menuIdsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(17, Short.MAX_VALUE))
    );
    addOrderPanelLayout.setVerticalGroup(
        addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addOrderPanelLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(48, 48, 48)
            .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(menuIdsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(40, 40, 40)
            .addComponent(jLabel2)
            .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addOrderPanelLayout.createSequentialGroup()
                    .addGap(74, 74, 74)
                    .addComponent(addFoodItemsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(45, 45, 45)
                    .addComponent(removeFoodItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
                .addGroup(addOrderPanelLayout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(menuItemsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                    .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addOrderPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                            .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(resetOrderButton)
                                .addComponent(proceedOrderButton))
                            .addGap(35, 35, 35))
                        .addGroup(addOrderPanelLayout.createSequentialGroup()
                            .addGap(34, 34, 34)
                            .addComponent(checkTokenCheckBox)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
    );

    updateOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel4.setText("UPDATE RESTAURANT ORDER");
    jLabel4.setToolTipText("");
    jLabel4.setBorder(new javax.swing.border.MatteBorder(null));

    jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel7.setText("Order ID");

    jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel14.setText("51");

    searchUpdateOrderIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchUpdateOrderIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchUpdateOrderIdTextFieldKeyTyped(evt);
        }
    });

    jLabel15.setText("(type the last four digits)");

    searchUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchUpdateButton.setText("SEARCH");
    searchUpdateButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchUpdateButtonActionPerformed(evt);
        }
    });

    updateOrderTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    jScrollPane3.setViewportView(updateOrderTable);

    removeNewFoodItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    removeNewFoodItemButton.setText("REMOVE");
    removeNewFoodItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeNewFoodItemButtonActionPerformed(evt);
        }
    });

    addNewFoodItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    addNewFoodItemButton.setText("ADD");
    addNewFoodItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addNewFoodItemButtonActionPerformed(evt);
        }
    });

    menuIdComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    menuIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Menu Id-" }));
    menuIdComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            menuIdComboBoxActionPerformed(evt);
        }
    });

    updateOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    updateOrderButton.setText("UPDATE");
    updateOrderButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateOrderButtonActionPerformed(evt);
        }
    });

    jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel6.setText("Select Order Items");

    menuIdUpdateLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    menuIdUpdateLabel.setText("Menu ID");

    orderNewItemsList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jScrollPane4.setViewportView(orderNewItemsList);

    orderNewItemsTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    orderNewItemsTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    )
    {public boolean isCellEditable(int row, int column){return false;}});

    orderNewItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            orderNewItemsTableMouseClicked(evt);
        }
    });
    orderNewItemsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
        public void componentShown(java.awt.event.ComponentEvent evt) {
            orderNewItemsTableComponentShown(evt);
        }
    }

    );
    orderNewItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            orderNewItemsTableMouseClicked(evt);
        }
    });
    orderNewItemsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
        public void componentShown(java.awt.event.ComponentEvent evt) {
            orderNewItemsTableComponentShown(evt);
        }
    });
    orderNewItemsScrollPane.setViewportView(orderNewItemsTable);

    javax.swing.GroupLayout updateOrderPanelLayout = new javax.swing.GroupLayout(updateOrderPanel);
    updateOrderPanel.setLayout(updateOrderPanelLayout);
    updateOrderPanelLayout.setHorizontalGroup(
        updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(updateOrderPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateOrderPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addNewFoodItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeNewFoodItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(orderNewItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(updateOrderPanelLayout.createSequentialGroup()
                    .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addGroup(updateOrderPanelLayout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(updateOrderPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel14)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchUpdateOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel15)
                                    .addGap(56, 56, 56)
                                    .addComponent(searchUpdateButton))))
                        .addGroup(updateOrderPanelLayout.createSequentialGroup()
                            .addComponent(menuIdUpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28)
                            .addComponent(menuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateOrderPanelLayout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addComponent(jScrollPane3)))
            .addContainerGap())
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateOrderPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(updateOrderButton)
            .addGap(125, 125, 125))
    );
    updateOrderPanelLayout.setVerticalGroup(
        updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(updateOrderPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchUpdateOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel15)
                .addComponent(searchUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
            .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(menuIdUpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(menuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(29, 29, 29)
            .addComponent(jLabel6)
            .addGap(18, 18, 18)
            .addGroup(updateOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(updateOrderPanelLayout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(addNewFoodItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(55, 55, 55)
                    .addComponent(removeNewFoodItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(orderNewItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(17, 17, 17)
            .addComponent(updateOrderButton))
    );

    removeOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel8.setText("Order ID");

    jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel9.setText("REMOVE RESTAURANT ORDER");
    jLabel9.setToolTipText("");
    jLabel9.setBorder(new javax.swing.border.MatteBorder(null));

    removeOrderTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeOrderTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    jScrollPane5.setViewportView(removeOrderTable);

    removeOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    removeOrderButton.setText(" REMOVE");
    removeOrderButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeOrderButtonActionPerformed(evt);
        }
    });

    jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel11.setText("51");

    searchRemoveOrderIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchRemoveOrderIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchRemoveOrderIdTextFieldKeyTyped(evt);
        }
    });

    searchRemoveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchRemoveButton.setText("SEARCH");
    searchRemoveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchRemoveButtonActionPerformed(evt);
        }
    });

    jLabel13.setText("(type the last four digits)");

    resetRemoveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    resetRemoveButton.setText("RESET");
    resetRemoveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetRemoveButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout removeOrderPanelLayout = new javax.swing.GroupLayout(removeOrderPanel);
    removeOrderPanel.setLayout(removeOrderPanelLayout);
    removeOrderPanelLayout.setHorizontalGroup(
        removeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(removeOrderPanelLayout.createSequentialGroup()
            .addGap(51, 51, 51)
            .addGroup(removeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(removeOrderPanelLayout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addGroup(removeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(searchRemoveButton)
                        .addGroup(removeOrderPanelLayout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(searchRemoveOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel13))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(68, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeOrderPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(resetRemoveButton)
            .addGap(30, 30, 30)
            .addComponent(removeOrderButton)
            .addGap(101, 101, 101))
    );
    removeOrderPanelLayout.setVerticalGroup(
        removeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(removeOrderPanelLayout.createSequentialGroup()
            .addGap(28, 28, 28)
            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(47, 47, 47)
            .addGroup(removeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchRemoveOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel13))
            .addGap(39, 39, 39)
            .addComponent(searchRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(81, 81, 81)
            .addGroup(removeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(removeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(resetRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(115, 115, 115))
    );

    searchOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel12.setText("SEARCH RESTAURANT ORDER");
    jLabel12.setToolTipText("");
    jLabel12.setBorder(new javax.swing.border.MatteBorder(null));

    jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel5.setText("Order ID");

    searchOrderIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchOrderIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchOrderIdTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchOrderIdTextFieldKeyTyped(evt);
        }
    });

    jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel10.setText("Customer NIC");

    searchOrderNicTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchOrderNicTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            searchOrderNicTextFieldKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchOrderNicTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchOrderNicTextFieldKeyTyped(evt);
        }
    });

    jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel16.setText("Order Date");

    searchButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchButton.setText("SEARCH");
    searchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchButtonActionPerformed(evt);
        }
    });

    orderSearchTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    orderSearchTable.setEnabled(false);

    orderSearchTable.setGridColor(new java.awt.Color(51, 153, 255));
    searchOrderScrollPane.setViewportView(orderSearchTable);

    jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButton2.setText("PRINT");

    jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel17.setText("51");

    jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel18.setText("V");

    searchOrderReserButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchOrderReserButton.setText("RESET");
    searchOrderReserButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchOrderReserButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout searchOrderPanelLayout = new javax.swing.GroupLayout(searchOrderPanel);
    searchOrderPanel.setLayout(searchOrderPanelLayout);
    searchOrderPanelLayout.setHorizontalGroup(
        searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchOrderPanelLayout.createSequentialGroup()
            .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchOrderPanelLayout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchOrderPanelLayout.createSequentialGroup()
                            .addComponent(searchButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 517, Short.MAX_VALUE)
                            .addComponent(searchOrderReserButton))
                        .addGroup(searchOrderPanelLayout.createSequentialGroup()
                            .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchOrderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(24, 24, 24)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchOrderNicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel16)))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addGroup(searchOrderPanelLayout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(jButton2)))
            .addGap(44, 44, 44))
    );
    searchOrderPanelLayout.setVerticalGroup(
        searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchOrderPanelLayout.createSequentialGroup()
            .addGap(35, 35, 35)
            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(50, 50, 50)
            .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchOrderNicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchOrderPanelLayout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(40, 40, 40))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchOrderPanelLayout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchOrderReserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(32, 32, 32)))
            .addComponent(searchOrderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(51, 51, 51)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(46, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout restaurantOrderPanelLayout = new javax.swing.GroupLayout(restaurantOrderPanel);
    restaurantOrderPanel.setLayout(restaurantOrderPanelLayout);
    restaurantOrderPanelLayout.setHorizontalGroup(
        restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(removeOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    restaurantOrderPanelLayout.setVerticalGroup(
        restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addGroup(restaurantOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restaurantOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    customerPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    addCustomerPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel19.setText("ADD CUSTOMER");

    jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel20.setText("Customer NIC");

    customerNicTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    customerNicTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            customerNicTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            customerNicTextFieldKeyTyped(evt);
        }
    });

    jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel21.setText("V");

    jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel22.setText("First Name");

    customerFNameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    customerFNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            customerFNameTextFieldKeyPressed(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            customerFNameTextFieldKeyTyped(evt);
        }
    });

    jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel23.setText("Telephone");

    countryCodeTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    countryCodeTextField.setText("+94");
    countryCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            countryCodeTextFieldKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            countryCodeTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            countryCodeTextFieldKeyTyped(evt);
        }
    });

    jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel24.setText("-");

    areaCodeTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    areaCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            areaCodeTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            areaCodeTextFieldKeyTyped(evt);
        }
    });

    phonePart1TextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    phonePart1TextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            phonePart1TextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            phonePart1TextFieldKeyTyped(evt);
        }
    });

    jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel25.setText("-");

    phonePart2TextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    phonePart2TextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            phonePart2TextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            phonePart2TextFieldKeyTyped(evt);
        }
    });

    jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel26.setText("-");

    jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel27.setText("E-mail");

    eMailTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    eMailTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            eMailTextFieldKeyTyped(evt);
        }
    });

    jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel28.setText("Last Name");

    customerLNameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    customerLNameTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            customerLNameTextFieldActionPerformed(evt);
        }
    });
    customerLNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            customerLNameTextFieldKeyPressed(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            customerLNameTextFieldKeyTyped(evt);
        }
    });

    goBackToOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    goBackToOrderButton.setText("BACK");
    goBackToOrderButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            goBackToOrderButtonActionPerformed(evt);
        }
    });

    nextButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    nextButton.setText("NEXT");
    nextButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            nextButtonActionPerformed(evt);
        }
    });

    demoAddCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    demoAddCustomerButton.setText("DEMO");
    demoAddCustomerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            demoAddCustomerButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout addCustomerPanelLayout = new javax.swing.GroupLayout(addCustomerPanel);
    addCustomerPanel.setLayout(addCustomerPanelLayout);
    addCustomerPanelLayout.setHorizontalGroup(
        addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addCustomerPanelLayout.createSequentialGroup()
            .addGap(54, 54, 54)
            .addComponent(goBackToOrderButton)
            .addGap(0, 0, Short.MAX_VALUE))
        .addGroup(addCustomerPanelLayout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                    .addComponent(jLabel19)
                    .addGap(545, 631, Short.MAX_VALUE))
                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                    .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(26, 26, 26)
                    .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addCustomerPanelLayout.createSequentialGroup()
                            .addComponent(customerFNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(customerLNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(197, 197, 197))
                        .addGroup(addCustomerPanelLayout.createSequentialGroup()
                            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                                    .addComponent(customerNicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel21))
                                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                                    .addComponent(countryCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel24)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(areaCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(3, 3, 3)
                                    .addComponent(jLabel25)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(phonePart1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel26)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(phonePart2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(eMailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addCustomerPanelLayout.createSequentialGroup()
                    .addComponent(demoAddCustomerButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextButton)
                    .addGap(83, 83, 83))))
    );
    addCustomerPanelLayout.setVerticalGroup(
        addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addCustomerPanelLayout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(37, 37, 37)
            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(customerNicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerLNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(customerFNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(19, 19, 19)
            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(areaCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(addCustomerPanelLayout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(countryCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(phonePart1TextField)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(phonePart2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)))
            .addGap(18, 18, 18)
            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(eMailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(demoAddCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(66, 66, 66)
            .addComponent(goBackToOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(134, 134, 134))
    );

    searchCustomerPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel29.setText("Customer NIC");

    jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel30.setText("SEARCH CUSTOMER");

    searchCustomerTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchCustomerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchCustomerTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchCustomerTextFieldKeyTyped(evt);
        }
    });

    searchCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchCustomerButton.setText("SEARCH");
    searchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerButtonActionPerformed(evt);
        }
    });

    jLabel51.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    jLabel51.setText("V");

    searchCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    searchCustomerTable.setEnabled(false);

    searchCustomerTable.setGridColor(new java.awt.Color(51, 153, 255));
    searchCustomerTablejScrollPane.setViewportView(searchCustomerTable);

    searchCustomerResetButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchCustomerResetButton.setText("RESET");
    searchCustomerResetButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerResetButtonActionPerformed(evt);
        }
    });

    searchCustomerDemoButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchCustomerDemoButton.setText("DEMO");
    searchCustomerDemoButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerDemoButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout searchCustomerPanelLayout = new javax.swing.GroupLayout(searchCustomerPanel);
    searchCustomerPanel.setLayout(searchCustomerPanelLayout);
    searchCustomerPanelLayout.setHorizontalGroup(
        searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchCustomerPanelLayout.createSequentialGroup()
            .addGap(29, 29, 29)
            .addGroup(searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel30)
                .addGroup(searchCustomerPanelLayout.createSequentialGroup()
                    .addComponent(jLabel29)
                    .addGap(35, 35, 35)
                    .addComponent(searchCustomerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel51))
                .addGroup(searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(searchCustomerPanelLayout.createSequentialGroup()
                        .addComponent(searchCustomerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchCustomerResetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCustomerDemoButton))
                    .addComponent(searchCustomerTablejScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(48, Short.MAX_VALUE))
    );
    searchCustomerPanelLayout.setVerticalGroup(
        searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchCustomerPanelLayout.createSequentialGroup()
            .addGap(29, 29, 29)
            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(52, 52, 52)
            .addGroup(searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchCustomerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchCustomerPanelLayout.createSequentialGroup()
                    .addGap(43, 43, 43)
                    .addComponent(searchCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(43, 43, 43))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchCustomerPanelLayout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(searchCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchCustomerDemoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchCustomerResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(33, 33, 33)))
            .addComponent(searchCustomerTablejScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(108, Short.MAX_VALUE))
    );

    updateCustomerPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel46.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel46.setText("Customer NIC");

    jLabel63.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel63.setText("UPDATE CUSTOMER");

    searchCustomerToUpdateTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchCustomerToUpdateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchCustomerToUpdateTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchCustomerToUpdateTextFieldKeyTyped(evt);
        }
    });

    searchCustomerToUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchCustomerToUpdateButton.setText("SEARCH");
    searchCustomerToUpdateButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerToUpdateButtonActionPerformed(evt);
        }
    });

    searchCustomerToUpdateTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    searchCustomerToUpdateTablejScrollPane.setViewportView(searchCustomerToUpdateTable);

    updateCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    updateCustomerButton.setText("UPDATE");
    updateCustomerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateCustomerButtonActionPerformed(evt);
        }
    });

    jLabel64.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    jLabel64.setText("V");

    searchCustomerToUpdateDemoButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchCustomerToUpdateDemoButton.setText("DEMO");
    searchCustomerToUpdateDemoButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerToUpdateDemoButtonActionPerformed(evt);
        }
    });

    searchCustomerToUpdateResetButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchCustomerToUpdateResetButton.setText("RESET");
    searchCustomerToUpdateResetButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerToUpdateResetButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout updateCustomerPanelLayout = new javax.swing.GroupLayout(updateCustomerPanel);
    updateCustomerPanel.setLayout(updateCustomerPanelLayout);
    updateCustomerPanelLayout.setHorizontalGroup(
        updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(updateCustomerPanelLayout.createSequentialGroup()
            .addGap(35, 35, 35)
            .addGroup(updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateCustomerPanelLayout.createSequentialGroup()
                    .addComponent(searchCustomerToUpdateButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchCustomerToUpdateResetButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchCustomerToUpdateDemoButton)
                    .addGap(51, 51, 51))
                .addGroup(updateCustomerPanelLayout.createSequentialGroup()
                    .addGroup(updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(updateCustomerButton)
                        .addGroup(updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel63)
                            .addGroup(updateCustomerPanelLayout.createSequentialGroup()
                                .addComponent(jLabel46)
                                .addGap(35, 35, 35)
                                .addComponent(searchCustomerToUpdateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel64))
                            .addComponent(searchCustomerToUpdateTablejScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(42, Short.MAX_VALUE))))
    );
    updateCustomerPanelLayout.setVerticalGroup(
        updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(updateCustomerPanelLayout.createSequentialGroup()
            .addGap(42, 42, 42)
            .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateCustomerPanelLayout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addGroup(updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchCustomerToUpdateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateCustomerPanelLayout.createSequentialGroup()
                    .addGap(44, 44, 44)
                    .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(55, 55, 55)
            .addGroup(updateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchCustomerToUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchCustomerToUpdateDemoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchCustomerToUpdateResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(43, 43, 43)
            .addComponent(searchCustomerToUpdateTablejScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
            .addComponent(updateCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(20, 20, 20))
    );

    roomCustomerPanel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    roomCustomerPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel43.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel43.setText("Customer NIC");

    existingCustomerNicTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    existingCustomerNicTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            existingCustomerNicTextFieldKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            existingCustomerNicTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            existingCustomerNicTextFieldKeyTyped(evt);
        }
    });

    jLabel44.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel44.setText("V");

    jLabel45.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel45.setText("Oder Amount");

    existingCustomerNameTextField.setEditable(false);
    existingCustomerNameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    existingCustomerNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            existingCustomerNameTextFieldKeyPressed(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            existingCustomerNameTextFieldKeyTyped(evt);
        }
    });

    jLabel47.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel47.setText("ADD CUSTOMER");

    addOrderOfExistingCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    addOrderOfExistingCustomerButton.setText("ADD ORDER");
    addOrderOfExistingCustomerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addOrderOfExistingCustomerButtonActionPerformed(evt);
        }
    });

    jLabel48.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel48.setText("Customer Name");

    orderAmountTextField.setEditable(false);
    orderAmountTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    orderAmountTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            orderAmountTextFieldActionPerformed(evt);
        }
    });
    orderAmountTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            orderAmountTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            orderAmountTextFieldKeyTyped(evt);
        }
    });

    resetOrderOfExistingCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    resetOrderOfExistingCustomerButton.setText("RESET");
    resetOrderOfExistingCustomerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetOrderOfExistingCustomerButtonActionPerformed(evt);
        }
    });

    demoOrderOfExistingCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    demoOrderOfExistingCustomerButton.setText("DEMO");
    demoOrderOfExistingCustomerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            demoOrderOfExistingCustomerButtonActionPerformed(evt);
        }
    });

    jLabel61.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel61.setText("Menu ID");

    jLabel62.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel62.setText("Order Description");

    existingCustomerOrderDescriptionTextArea.setEditable(false);
    existingCustomerOrderDescriptionTextArea.setColumns(20);
    existingCustomerOrderDescriptionTextArea.setRows(5);
    jScrollPane18.setViewportView(existingCustomerOrderDescriptionTextArea);

    existingCustomerOrderMenuIdTextField.setEditable(false);
    existingCustomerOrderMenuIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    existingCustomerOrderMenuIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            existingCustomerOrderMenuIdTextFieldKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            existingCustomerOrderMenuIdTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            existingCustomerOrderMenuIdTextFieldKeyTyped(evt);
        }
    });

    javax.swing.GroupLayout roomCustomerPanelLayout = new javax.swing.GroupLayout(roomCustomerPanel);
    roomCustomerPanel.setLayout(roomCustomerPanelLayout);
    roomCustomerPanelLayout.setHorizontalGroup(
        roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(roomCustomerPanelLayout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomCustomerPanelLayout.createSequentialGroup()
                    .addComponent(jLabel43)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(existingCustomerNicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel44)
                    .addGap(473, 473, 473))
                .addGroup(roomCustomerPanelLayout.createSequentialGroup()
                    .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel47)
                        .addGroup(roomCustomerPanelLayout.createSequentialGroup()
                            .addComponent(jLabel61)
                            .addGap(81, 81, 81)
                            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(existingCustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(existingCustomerOrderMenuIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(341, 341, 341))
                .addGroup(roomCustomerPanelLayout.createSequentialGroup()
                    .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel62, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(roomCustomerPanelLayout.createSequentialGroup()
                            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomCustomerPanelLayout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(demoOrderOfExistingCustomerButton)
                                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(10, 10, 10)))
                            .addGap(10, 10, 10)))
                    .addGap(18, 18, 18)
                    .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(orderAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(216, 216, 216))))
        .addGroup(roomCustomerPanelLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(resetOrderOfExistingCustomerButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(addOrderOfExistingCustomerButton)
            .addContainerGap())
    );
    roomCustomerPanelLayout.setVerticalGroup(
        roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(roomCustomerPanelLayout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(48, 48, 48)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(existingCustomerNicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel44))
            .addGap(19, 19, 19)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(existingCustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(21, 21, 21)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(existingCustomerOrderMenuIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(orderAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(25, 25, 25)
            .addGroup(roomCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addOrderOfExistingCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(resetOrderOfExistingCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(demoOrderOfExistingCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
    customerPanel.setLayout(customerPanelLayout);
    customerPanelLayout.setHorizontalGroup(
        customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 768, Short.MAX_VALUE)
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(roomCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    customerPanelLayout.setVerticalGroup(
        customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 620, Short.MAX_VALUE)
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(roomCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    restaurantPaymentPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel49.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel49.setText("Menu ID");

    jLabel50.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel50.setText("ADD PAYMENT");

    paymentMenuIdLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    jLabel52.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel52.setText("Order Description");

    jLabel53.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel53.setText("Payment Method");

    paymentOrderDescriptionTextArea.setColumns(20);
    paymentOrderDescriptionTextArea.setRows(5);
    paymentOrderDescriptionTextArea.setEnabled(false);
    jScrollPane13.setViewportView(paymentOrderDescriptionTextArea);

    paymentMethodComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    paymentMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Credit" }));

    jLabel54.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel54.setText("Amount");

    jLabel55.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel55.setText("Paid Amount");

    jLabel56.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel56.setText("Balance");

    paymentAmountTextField.setEditable(false);
    paymentAmountTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    paymentAmountTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            paymentAmountTextFieldKeyTyped(evt);
        }
    });

    paymentPaidAmountTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    paymentPaidAmountTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            paymentPaidAmountTextFieldKeyPressed(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            paymentPaidAmountTextFieldKeyTyped(evt);
        }
    });

    paymentBalanceTextField.setEditable(false);
    paymentBalanceTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    paymentDoneButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    paymentDoneButton.setText("DONE");
    paymentDoneButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            paymentDoneButtonActionPerformed(evt);
        }
    });

    printBillButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    printBillButton.setText("PRINT BILL");

    javax.swing.GroupLayout restaurantPaymentPanelLayout = new javax.swing.GroupLayout(restaurantPaymentPanel);
    restaurantPaymentPanel.setLayout(restaurantPaymentPanelLayout);
    restaurantPaymentPanelLayout.setHorizontalGroup(
        restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(restaurantPaymentPanelLayout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(restaurantPaymentPanelLayout.createSequentialGroup()
                    .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel52)
                        .addComponent(jLabel49)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel54)
                            .addComponent(jLabel53)
                            .addComponent(jLabel55)
                            .addComponent(jLabel56)))
                    .addGap(18, 18, 18)
                    .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(paymentMenuIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paymentMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(paymentAmountTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(paymentPaidAmountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paymentBalanceTextField))))
                .addComponent(jLabel50))
            .addContainerGap(228, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, restaurantPaymentPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(printBillButton)
            .addGap(30, 30, 30)
            .addComponent(paymentDoneButton)
            .addGap(79, 79, 79))
    );
    restaurantPaymentPanelLayout.setVerticalGroup(
        restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(restaurantPaymentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(paymentMenuIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(restaurantPaymentPanelLayout.createSequentialGroup()
                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(28, 28, 28)
                    .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paymentAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paymentPaidAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paymentBalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(58, 58, 58))
                .addGroup(restaurantPaymentPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(31, 31, 31)
                    .addComponent(paymentMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                    .addGroup(restaurantPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(paymentDoneButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addComponent(printBillButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())))
    );

    menuPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    addMenuPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel31.setText("ADD NEW MENU");
    jLabel31.setToolTipText("");
    jLabel31.setBorder(new javax.swing.border.MatteBorder(null));

    jLabel32.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel32.setText("Menu Description");

    newMenuItemsList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jScrollPane6.setViewportView(newMenuItemsList);

    removeNewMenuItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    removeNewMenuItemButton.setText("<<");
    removeNewMenuItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeNewMenuItemButtonActionPerformed(evt);
        }
    });

    addNewMenuItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    addNewMenuItemButton.setText(">>");
    addNewMenuItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            addNewMenuItemButtonMousePressed(evt);
        }
    });
    addNewMenuItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addNewMenuItemButtonActionPerformed(evt);
        }
    });

    foodItemsTable.setFont(new java.awt.Font("Tahoma", 0, 14));
    foodItemsTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"

        }
    ));
    jScrollPane7.setViewportView(foodItemsTable);

    jLabel33.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel33.setText("Menu Price");

    menuPriceTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    menuPriceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            menuPriceTextFieldKeyTyped(evt);
        }
    });

    menuDescriptionTextArea.setColumns(20);
    menuDescriptionTextArea.setRows(5);
    jScrollPane8.setViewportView(menuDescriptionTextArea);

    addNewMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    addNewMenuButton.setText("ADD MENU");
    addNewMenuButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addNewMenuButtonActionPerformed(evt);
        }
    });

    resetAddNewMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    resetAddNewMenuButton.setText("RESET");
    resetAddNewMenuButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetAddNewMenuButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout addMenuPanelLayout = new javax.swing.GroupLayout(addMenuPanel);
    addMenuPanel.setLayout(addMenuPanelLayout);
    addMenuPanelLayout.setHorizontalGroup(
        addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addMenuPanelLayout.createSequentialGroup()
            .addContainerGap(13, Short.MAX_VALUE)
            .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addMenuPanelLayout.createSequentialGroup()
                    .addComponent(resetAddNewMenuButton)
                    .addGap(18, 18, 18)
                    .addComponent(addNewMenuButton)
                    .addGap(81, 81, 81))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addMenuPanelLayout.createSequentialGroup()
                    .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addMenuPanelLayout.createSequentialGroup()
                            .addGap(517, 517, 517)
                            .addComponent(jLabel32))
                        .addGroup(addMenuPanelLayout.createSequentialGroup()
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(addNewMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(removeNewMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(addMenuPanelLayout.createSequentialGroup()
                            .addComponent(jLabel33)
                            .addGap(18, 18, 18)
                            .addComponent(menuPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())))
        .addGroup(addMenuPanelLayout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    addMenuPanelLayout.setVerticalGroup(
        addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addMenuPanelLayout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(addMenuPanelLayout.createSequentialGroup()
                    .addComponent(addNewMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(29, 29, 29)
                    .addComponent(removeNewMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(88, 88, 88))
                .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(53, 53, 53)
            .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(44, 44, 44)
            .addGroup(addMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(resetAddNewMenuButton)
                .addComponent(addNewMenuButton))
            .addContainerGap(51, Short.MAX_VALUE))
    );

    updateMenuPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel57.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel57.setText("UPDATE MENU");
    jLabel57.setToolTipText("");
    jLabel57.setBorder(new javax.swing.border.MatteBorder(null));

    foodItemsToUpdateTable.setFont(new java.awt.Font("Tahoma", 0, 14));
    foodItemsToUpdateTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"

        }
    ));
    jScrollPane15.setViewportView(foodItemsToUpdateTable);

    addUpdatedMenuItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    addUpdatedMenuItemButton.setText(">>");
    addUpdatedMenuItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            addUpdatedMenuItemButtonMousePressed(evt);
        }
    });
    addUpdatedMenuItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addUpdatedMenuItemButtonActionPerformed(evt);
        }
    });

    jLabel58.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel58.setText("Menu Description");

    updatedMenuItemsList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jScrollPane16.setViewportView(updatedMenuItemsList);

    removeUpdatedMenuItemButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    removeUpdatedMenuItemButton.setText("<<");
    removeUpdatedMenuItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeUpdatedMenuItemButtonActionPerformed(evt);
        }
    });

    updatedMenuDescriptionTextArea.setColumns(20);
    updatedMenuDescriptionTextArea.setRows(5);
    jScrollPane17.setViewportView(updatedMenuDescriptionTextArea);

    updatedMenuPriceTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    updatedMenuPriceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            updatedMenuPriceTextFieldKeyTyped(evt);
        }
    });

    jLabel59.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel59.setText("Menu Price");

    resetUpdatedMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    resetUpdatedMenuButton.setText("RESET");
    resetUpdatedMenuButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetUpdatedMenuButtonActionPerformed(evt);
        }
    });

    updateMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    updateMenuButton.setText("UPDATE MENU");
    updateMenuButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateMenuButtonActionPerformed(evt);
        }
    });

    updateMenuMenuIdComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    updateMenuMenuIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Menu ID-" }));

    jLabel60.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel60.setText("Menu ID");

    javax.swing.GroupLayout updateMenuPanelLayout = new javax.swing.GroupLayout(updateMenuPanel);
    updateMenuPanel.setLayout(updateMenuPanelLayout);
    updateMenuPanelLayout.setHorizontalGroup(
        updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(updateMenuPanelLayout.createSequentialGroup()
            .addContainerGap(13, Short.MAX_VALUE)
            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateMenuPanelLayout.createSequentialGroup()
                    .addComponent(resetUpdatedMenuButton)
                    .addGap(18, 18, 18)
                    .addComponent(updateMenuButton)
                    .addGap(81, 81, 81))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateMenuPanelLayout.createSequentialGroup()
                    .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(updateMenuPanelLayout.createSequentialGroup()
                            .addGap(590, 590, 590)
                            .addComponent(jLabel58))
                        .addGroup(updateMenuPanelLayout.createSequentialGroup()
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(addUpdatedMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(removeUpdatedMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(updateMenuPanelLayout.createSequentialGroup()
                            .addComponent(jLabel59)
                            .addGap(18, 18, 18)
                            .addComponent(updatedMenuPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())))
        .addGroup(updateMenuPanelLayout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateMenuPanelLayout.createSequentialGroup()
                    .addComponent(jLabel60)
                    .addGap(18, 18, 18)
                    .addComponent(updateMenuMenuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
    );
    updateMenuPanelLayout.setVerticalGroup(
        updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(updateMenuPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(25, 25, 25)
            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel58, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateMenuMenuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(updateMenuPanelLayout.createSequentialGroup()
                    .addComponent(addUpdatedMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(29, 29, 29)
                    .addComponent(removeUpdatedMenuItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(88, 88, 88))
                .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane16)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(53, 53, 53)
            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedMenuPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(44, 44, 44)
            .addGroup(updateMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(resetUpdatedMenuButton)
                .addComponent(updateMenuButton))
            .addContainerGap(51, Short.MAX_VALUE))
    );

    removeMenuPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel34.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel34.setText("REMOVE MENU");
    jLabel34.setToolTipText("");
    jLabel34.setBorder(new javax.swing.border.MatteBorder(null));

    jLabel35.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel35.setText("Menu ID");

    removeMenuIdComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeMenuIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Menu ID-" }));

    removeMenuSearchButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    removeMenuSearchButton.setText("REMOVE");
    removeMenuSearchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeMenuSearchButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout removeMenuPanelLayout = new javax.swing.GroupLayout(removeMenuPanel);
    removeMenuPanel.setLayout(removeMenuPanelLayout);
    removeMenuPanelLayout.setHorizontalGroup(
        removeMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(removeMenuPanelLayout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(removeMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(removeMenuSearchButton)
                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(removeMenuPanelLayout.createSequentialGroup()
                    .addComponent(jLabel35)
                    .addGap(45, 45, 45)
                    .addComponent(removeMenuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(506, Short.MAX_VALUE))
    );
    removeMenuPanelLayout.setVerticalGroup(
        removeMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(removeMenuPanelLayout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(52, 52, 52)
            .addGroup(removeMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(removeMenuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(50, 50, 50)
            .addComponent(removeMenuSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(386, Short.MAX_VALUE))
    );

    viewMenuPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel36.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel36.setText("Menu ID");

    viewMenuIdComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    viewMenuIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Menu ID-" }));

    viewMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    viewMenuButton.setText("VIEW");
    viewMenuButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            viewMenuButtonActionPerformed(evt);
        }
    });

    jLabel37.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel37.setText("VIEW MENU");
    jLabel37.setToolTipText("");
    jLabel37.setBorder(new javax.swing.border.MatteBorder(null));

    viewMenuResetButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    viewMenuResetButton.setText("RESET");
    viewMenuResetButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            viewMenuResetButtonActionPerformed(evt);
        }
    });

    viewMenuList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jScrollPane1.setViewportView(viewMenuList);

    jLabel65.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel65.setText("Menu Status");

    viewMenuStatusTextField.setEditable(false);
    viewMenuStatusTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

    jLabel66.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel66.setText("Menu Price");

    viewMenuPriceTextField.setEditable(false);
    viewMenuPriceTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

    javax.swing.GroupLayout viewMenuPanelLayout = new javax.swing.GroupLayout(viewMenuPanel);
    viewMenuPanel.setLayout(viewMenuPanelLayout);
    viewMenuPanelLayout.setHorizontalGroup(
        viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(viewMenuPanelLayout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(viewMenuPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(73, 73, 73)
                    .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(viewMenuPanelLayout.createSequentialGroup()
                            .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(viewMenuStatusTextField))
                        .addGroup(viewMenuPanelLayout.createSequentialGroup()
                            .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(viewMenuPriceTextField))))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewMenuPanelLayout.createSequentialGroup()
                    .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(viewMenuPanelLayout.createSequentialGroup()
                            .addComponent(jLabel36)
                            .addGap(45, 45, 45)
                            .addComponent(viewMenuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 408, Short.MAX_VALUE))
                .addGroup(viewMenuPanelLayout.createSequentialGroup()
                    .addComponent(viewMenuButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewMenuResetButton)))
            .addGap(93, 93, 93))
    );
    viewMenuPanelLayout.setVerticalGroup(
        viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(viewMenuPanelLayout.createSequentialGroup()
            .addGap(32, 32, 32)
            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(47, 47, 47)
            .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(viewMenuIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(42, 42, 42)
            .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(viewMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(viewMenuResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(49, 49, 49)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(35, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewMenuPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(viewMenuStatusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(27, 27, 27)
            .addGroup(viewMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(viewMenuPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(207, 207, 207))
    );

    javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
    menuPanel.setLayout(menuPanelLayout);
    menuPanelLayout.setHorizontalGroup(
        menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 768, Short.MAX_VALUE)
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(removeMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(viewMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    menuPanelLayout.setVerticalGroup(
        menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 620, Short.MAX_VALUE)
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(removeMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(viewMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    otherOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    roomOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel38.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel38.setText("ROOM SERVICE");
    jLabel38.setToolTipText("");
    jLabel38.setBorder(new javax.swing.border.MatteBorder(null));

    changeStatusOfRoomOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    changeStatusOfRoomOrderButton.setText("CHANGE STATUS");
    changeStatusOfRoomOrderButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            changeStatusOfRoomOrderButtonActionPerformed(evt);
        }
    });

    roomOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    roomOrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            roomOrdersTableMouseClicked(evt);
        }
    });
    jScrollPane11.setViewportView(roomOrdersTable);

    roomServiceOrderIdTextField.setEditable(false);
    roomServiceOrderIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    jLabel39.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel39.setText("Order ID");

    viewRoomServiceOrdersButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    viewRoomServiceOrdersButton.setText("SEE ALL");
    viewRoomServiceOrdersButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            viewRoomServiceOrdersButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout roomOrderPanelLayout = new javax.swing.GroupLayout(roomOrderPanel);
    roomOrderPanel.setLayout(roomOrderPanelLayout);
    roomOrderPanelLayout.setHorizontalGroup(
        roomOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(roomOrderPanelLayout.createSequentialGroup()
            .addGap(25, 25, 25)
            .addGroup(roomOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(changeStatusOfRoomOrderButton)
                .addGroup(roomOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roomOrderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addGap(18, 18, 18)
                        .addComponent(roomServiceOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(viewRoomServiceOrdersButton)))
            .addContainerGap(26, Short.MAX_VALUE))
    );
    roomOrderPanelLayout.setVerticalGroup(
        roomOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(roomOrderPanelLayout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(38, 38, 38)
            .addComponent(viewRoomServiceOrdersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(29, 29, 29)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(40, 40, 40)
            .addGroup(roomOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(roomServiceOrderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
            .addComponent(changeStatusOfRoomOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(46, 46, 46))
    );

    javax.swing.GroupLayout otherOrderPanelLayout = new javax.swing.GroupLayout(otherOrderPanel);
    otherOrderPanel.setLayout(otherOrderPanelLayout);
    otherOrderPanelLayout.setHorizontalGroup(
        otherOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 768, Short.MAX_VALUE)
        .addGroup(otherOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(roomOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    otherOrderPanelLayout.setVerticalGroup(
        otherOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 620, Short.MAX_VALUE)
        .addGroup(otherOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherOrderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(roomOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    employeePanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel40.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel40.setText("Employee ID");

    jLabel41.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel41.setText("RESTAURANT EMPLOYEES");
    jLabel41.setToolTipText("");
    jLabel41.setBorder(new javax.swing.border.MatteBorder(null));

    employeeIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    employeeIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            employeeIdTextFieldKeyTyped(evt);
        }
    });

    jLabel42.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel42.setText("21");

    employeeInfoTable.setFont(new java.awt.Font("Tahoma", 0, 14));
    employeeInfoTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    employeeInfoTable.setEnabled(false);

    employeeInfoTable.setGridColor(new java.awt.Color(0, 153, 255));
    jScrollPane12.setViewportView(employeeInfoTable);

    searchAllEmployeesButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchAllEmployeesButton.setText("SEARCH ALL");
    searchAllEmployeesButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchAllEmployeesButtonActionPerformed(evt);
        }
    });

    resetEmployeeButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    resetEmployeeButton.setText("RESET");

    searchSingleEmployeeButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    searchSingleEmployeeButton.setText("SEARCH SINGLE");
    searchSingleEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchSingleEmployeeButtonActionPerformed(evt);
        }
    });

    printEmployeeButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    printEmployeeButton.setText("PRINT");
    printEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            printEmployeeButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout employeePanelLayout = new javax.swing.GroupLayout(employeePanel);
    employeePanel.setLayout(employeePanelLayout);
    employeePanelLayout.setHorizontalGroup(
        employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(employeePanelLayout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeePanelLayout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(employeeIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printEmployeeButton)
                    .addGroup(employeePanelLayout.createSequentialGroup()
                        .addComponent(searchSingleEmployeeButton)
                        .addGap(447, 447, 447)
                        .addComponent(searchAllEmployeesButton)))
                .addComponent(resetEmployeeButton))
            .addContainerGap(25, Short.MAX_VALUE))
    );
    employeePanelLayout.setVerticalGroup(
        employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(employeePanelLayout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(40, 40, 40)
            .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeePanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(27, 27, 27)
            .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchSingleEmployeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchAllEmployeesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(resetEmployeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(32, 32, 32)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
            .addComponent(printEmployeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(29, 29, 29))
    );

    orderStockPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    stockOrderPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jLabel67.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel67.setText("Item ID");

    itemIdComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    itemIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select ID--" }));
    itemIdComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            itemIdComboBoxActionPerformed(evt);
        }
    });

    itemNameComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    itemNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Name--" }));
    itemNameComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            itemNameComboBoxActionPerformed(evt);
        }
    });

    jLabel68.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel68.setText("Item Name");

    jLabel69.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel69.setText("Item Category");

    jLabel70.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel70.setText("Department");

    jLabel71.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel71.setText("Order Qty");

    jLabel72.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel72.setText("Units");

    departmentTextField.setEditable(false);
    departmentTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            departmentTextFieldActionPerformed(evt);
        }
    });

    itemCategorycomboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    itemCategorycomboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Category--" }));
    itemCategorycomboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            itemCategorycomboBoxActionPerformed(evt);
        }
    });

    orderQtyTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            orderQtyTextFieldActionPerformed(evt);
        }
    });
    orderQtyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            orderQtyTextFieldKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            orderQtyTextFieldKeyTyped(evt);
        }
    });

    unitsOrderTextField.setEditable(false);

    clearRequestButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    clearRequestButton.setText("Clear");
    clearRequestButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearRequestButtonActionPerformed(evt);
        }
    });

    requestStockButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    requestStockButton.setText("Request Stock");
    requestStockButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            requestStockButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout stockOrderPanelLayout = new javax.swing.GroupLayout(stockOrderPanel);
    stockOrderPanel.setLayout(stockOrderPanelLayout);
    stockOrderPanelLayout.setHorizontalGroup(
        stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockOrderPanelLayout.createSequentialGroup()
            .addContainerGap(176, Short.MAX_VALUE)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(stockOrderPanelLayout.createSequentialGroup()
                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(stockOrderPanelLayout.createSequentialGroup()
                    .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(stockOrderPanelLayout.createSequentialGroup()
                    .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(departmentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, stockOrderPanelLayout.createSequentialGroup()
                    .addComponent(jLabel69, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemCategorycomboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, stockOrderPanelLayout.createSequentialGroup()
                    .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orderQtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, stockOrderPanelLayout.createSequentialGroup()
                    .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(stockOrderPanelLayout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addComponent(clearRequestButton)))
                    .addGap(79, 79, 79)
                    .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(unitsOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockOrderPanelLayout.createSequentialGroup()
                            .addComponent(requestStockButton)
                            .addGap(59, 59, 59)))))
            .addGap(178, 178, 178))
    );
    stockOrderPanelLayout.setVerticalGroup(
        stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockOrderPanelLayout.createSequentialGroup()
            .addContainerGap(76, Short.MAX_VALUE)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(itemIdComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel67, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(itemNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(itemCategorycomboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel69, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(departmentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(orderQtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(unitsOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(67, 67, 67)
            .addGroup(stockOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(requestStockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(117, 117, 117))
    );

    javax.swing.GroupLayout orderStockPanelLayout = new javax.swing.GroupLayout(orderStockPanel);
    orderStockPanel.setLayout(orderStockPanelLayout);
    orderStockPanelLayout.setHorizontalGroup(
        orderStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 768, Short.MAX_VALUE)
        .addGroup(orderStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderStockPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(stockOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    orderStockPanelLayout.setVerticalGroup(
        orderStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 620, Short.MAX_VALUE)
        .addGroup(orderStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderStockPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(stockOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    maintenancePanel.setPreferredSize(new java.awt.Dimension(768, 620));

    maintenanceRequestPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    javax.swing.GroupLayout maintenanceRequestPanelLayout = new javax.swing.GroupLayout(maintenanceRequestPanel);
    maintenanceRequestPanel.setLayout(maintenanceRequestPanelLayout);
    maintenanceRequestPanelLayout.setHorizontalGroup(
        maintenanceRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 768, Short.MAX_VALUE)
    );
    maintenanceRequestPanelLayout.setVerticalGroup(
        maintenanceRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 620, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout maintenancePanelLayout = new javax.swing.GroupLayout(maintenancePanel);
    maintenancePanel.setLayout(maintenancePanelLayout);
    maintenancePanelLayout.setHorizontalGroup(
        maintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 768, Short.MAX_VALUE)
        .addGroup(maintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maintenancePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(maintenanceRequestPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    maintenancePanelLayout.setVerticalGroup(
        maintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 620, Short.MAX_VALUE)
        .addGroup(maintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maintenancePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(maintenanceRequestPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    reportsPanel.setPreferredSize(new java.awt.Dimension(768, 620));

    jButton1.setText("jButton1");

    javax.swing.GroupLayout reportsPanelLayout = new javax.swing.GroupLayout(reportsPanel);
    reportsPanel.setLayout(reportsPanelLayout);
    reportsPanelLayout.setHorizontalGroup(
        reportsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(reportsPanelLayout.createSequentialGroup()
            .addGap(70, 70, 70)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(600, Short.MAX_VALUE))
    );
    reportsPanelLayout.setVerticalGroup(
        reportsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(reportsPanelLayout.createSequentialGroup()
            .addGap(102, 102, 102)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(479, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
    contentPanel.setLayout(contentPanelLayout);
    contentPanelLayout.setHorizontalGroup(
        contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(restaurantOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(customerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(otherOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(employeePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(orderStockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(maintenancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reportsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(restaurantPaymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    contentPanelLayout.setVerticalGroup(
        contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 956, Short.MAX_VALUE)
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(restaurantOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(customerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(otherOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(employeePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(orderStockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(maintenancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(reportsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(restaurantPaymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    mainPane.setLayer(contentPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout mainPaneLayout = new javax.swing.GroupLayout(mainPane);
    mainPane.setLayout(mainPaneLayout);
    mainPaneLayout.setHorizontalGroup(
        mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 778, Short.MAX_VALUE)
        .addGroup(mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                .addContainerGap()))
    );
    mainPaneLayout.setVerticalGroup(
        mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 655, Short.MAX_VALUE)
        .addGroup(mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap()))
    );

    restaurantOrderMenu.setBorder(null);
    restaurantOrderMenu.setText("Restaurant Order");
    restaurantOrderMenu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    restaurantOrderMenu.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
        public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            restaurantOrderMenuMenuKeyPressed(evt);
        }
        public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
        }
        public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
        }
    });
    restaurantOrderMenu.addMenuListener(new javax.swing.event.MenuListener() {
        public void menuCanceled(javax.swing.event.MenuEvent evt) {
        }
        public void menuDeselected(javax.swing.event.MenuEvent evt) {
        }
        public void menuSelected(javax.swing.event.MenuEvent evt) {
            restaurantOrderMenuMenuSelected(evt);
        }
    });

    addOrderMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
    addOrderMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    addOrderMenuItem.setText("Add Order");
    addOrderMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            addOrderMenuItemMouseClicked(evt);
        }
    });
    addOrderMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addOrderMenuItemActionPerformed(evt);
        }
    });
    restaurantOrderMenu.add(addOrderMenuItem);

    updateOrderMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
    updateOrderMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    updateOrderMenuItem.setText("Update Order");
    updateOrderMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateOrderMenuItemActionPerformed(evt);
        }
    });
    restaurantOrderMenu.add(updateOrderMenuItem);

    removeOrderMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
    removeOrderMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeOrderMenuItem.setText("Remove Order");
    removeOrderMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeOrderMenuItemActionPerformed(evt);
        }
    });
    restaurantOrderMenu.add(removeOrderMenuItem);

    searchOrderMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
    searchOrderMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchOrderMenuItem.setText("Search Order");
    searchOrderMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchOrderMenuItemActionPerformed(evt);
        }
    });
    restaurantOrderMenu.add(searchOrderMenuItem);

    jMenuBar1.add(restaurantOrderMenu);

    customerMenu.setText("Customer");
    customerMenu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    customerMenu.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            customerMenuActionPerformed(evt);
        }
    });

    addCustomerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
    addCustomerMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    addCustomerMenuItem.setText("Add Customer");
    addCustomerMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addCustomerMenuItemActionPerformed(evt);
        }
    });
    customerMenu.add(addCustomerMenuItem);

    updateCustomerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
    updateCustomerMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    updateCustomerMenuItem.setText("Update Customer");
    updateCustomerMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateCustomerMenuItemActionPerformed(evt);
        }
    });
    customerMenu.add(updateCustomerMenuItem);

    searchCustomerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
    searchCustomerMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchCustomerMenuItem.setText("Search Customer");
    searchCustomerMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchCustomerMenuItemActionPerformed(evt);
        }
    });
    customerMenu.add(searchCustomerMenuItem);

    jMenuBar1.add(customerMenu);

    jMenu3.setText("Menu");
    jMenu3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    addMenuMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
    addMenuMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    addMenuMenuItem.setText("Add Menu");
    addMenuMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addMenuMenuItemActionPerformed(evt);
        }
    });
    jMenu3.add(addMenuMenuItem);

    updateMenuMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
    updateMenuMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    updateMenuMenuItem.setText("Update Menu");
    updateMenuMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateMenuMenuItemActionPerformed(evt);
        }
    });
    jMenu3.add(updateMenuMenuItem);

    removeMenuMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
    removeMenuMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeMenuMenuItem.setText("Remove Menu");
    removeMenuMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeMenuMenuItemActionPerformed(evt);
        }
    });
    jMenu3.add(removeMenuMenuItem);

    viewMenuMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
    viewMenuMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    viewMenuMenuItem.setText("View Menu");
    viewMenuMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            viewMenuMenuItemActionPerformed(evt);
        }
    });
    jMenu3.add(viewMenuMenuItem);

    jMenuBar1.add(jMenu3);

    jMenu4.setText("Other Orders");
    jMenu4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    roomOrdersMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    roomOrdersMenuItem.setText("Room Orders");
    roomOrdersMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            roomOrdersMenuItemActionPerformed(evt);
        }
    });
    jMenu4.add(roomOrdersMenuItem);

    jMenuBar1.add(jMenu4);

    jMenu5.setText("Employee");
    jMenu5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    jMenuItem1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jMenuItem1.setText("View Employee");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem1ActionPerformed(evt);
        }
    });
    jMenu5.add(jMenuItem1);

    jMenuBar1.add(jMenu5);

    jMenu6.setText("Order Stock");
    jMenu6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    requestStockMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    requestStockMenuItem.setText("Request Stock");
    requestStockMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            requestStockMenuItemActionPerformed(evt);
        }
    });
    jMenu6.add(requestStockMenuItem);

    jMenuBar1.add(jMenu6);

    jMenu7.setText("Maintenance");
    jMenu7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    maintenanceMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    maintenanceMenuItem.setText("Maintenance");
    maintenanceMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            maintenanceMenuItemActionPerformed(evt);
        }
    });
    jMenu7.add(maintenanceMenuItem);

    jMenuBar1.add(jMenu7);

    jMenu8.setText("Reports");
    jMenu8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    reportsMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    reportsMenuItem.setText("reportsMenuItem");
    reportsMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            reportsMenuItemActionPerformed(evt);
        }
    });
    jMenu8.add(reportsMenuItem);

    jMenuBar1.add(jMenu8);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    //fill the combo box with menu IDs
    public void fillMenuIds(JComboBox cmb)
    {
        try
        {
            String sql="SELECT menu_id FROM menu";//get menu ids from the table
            //System.out.println(sql);
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            
            while(rs.next())
            {
                String menuId=rs.getString("menu_id");
                cmb.addItem(menuId);
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    
    public void searchOrder(String orderid,String customernic,String orderdate)
    {
         System.out.println(orderid);
         System.out.println(customernic);
         System.out.println(orderdate);

         if(!orderid.equals("") && customernic.equals("") && orderdate.equals(""))
         {
             System.out.println("order id only empty");
         }
         String sql = "SELECT o.restaurant_order_id AS 'Order ID',o.restaurant_customer_nic AS 'Customer NIC',o.order_menu_id AS 'Order Menu ID',o.order_des AS 'Order Description',o.order_date AS 'Order Date',p.restaurant_payment_id AS 'Payment ID' FROM restaurant_order o,restaurant_payment p WHERE o.restaurant_order_id = p.restaurant_payment_order_id AND (CAST(o.restaurant_order_id as CHAR)='" + orderid + "' "
                 + "OR CAST(o.restaurant_customer_nic as CHAR)='" + customernic + "'"
                   + "OR o.order_date='" + orderdate + "')";
         try
         {
             ps=con.prepareStatement(sql);
             rs=ps.executeQuery();

             orderSearchTable.setModel(DbUtils.resultSetToTableModel(rs)); //loading the query results

             if(orderSearchTable.getRowCount()==0)
            {
                JOptionPane.showMessageDialog(null,"No Such Record!","Error",JOptionPane.ERROR_MESSAGE);

            }

            ResultSetMetaData rsmd = rs.getMetaData();
            System.out.println("querying SELECT * FROM XXX");
            int columnsNumber = rsmd.getColumnCount();
            while (rs.next()) 
            {
                for (int i = 1; i <= columnsNumber; i++)
                {
                    if (i > 1)
                    {
                        System.out.print(",  ");
                    }
                    String columnValue = rs.getString(i);
                    System.out.print(columnValue + " " + rsmd.getColumnName(i));
                }
                System.out.println("");
            } 
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
    }
     
    public boolean isNICValid(String nic)
    {
        String r = "^\\d{9}[V|v|x|X]$";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(r);
        java.util.regex.Matcher m = pattern.matcher(nic);
        return m.matches();      
    }
     
    
    public boolean isValidEmailAddress(String email) 
    {
        String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(ePattern);
        java.util.regex.Matcher m = p.matcher(email);
        return m.matches();
    } 
    
    public boolean isPhoneNumberValid(String phoneNumber)
    {
        String phone = "\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\W*\\d\\W*\\d\\W*\\d\\W*\\d\\W*\\d\\W*\\d\\W*\\d\\W*\\d\\W*(\\d{1,2})$";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(phone);
        java.util.regex.Matcher m = pattern.matcher(phoneNumber);
        return m.matches();      
    }
    
    public boolean isDoubleValid(String x)
    {
        String r = "\\d{1,5}";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(r);
        java.util.regex.Matcher m = pattern.matcher(x);
        boolean t = m.matches();
        Double v = Double.parseDouble(x);
        if ((v<0) && (t=false))
        {
            return false;
        }
                
        return true;        
    }
     
    //validating the quantity
    public static boolean qtyValidation(String s)
    {
        String r = "\\d{1,3}";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(r);
        java.util.regex.Matcher m = pattern.matcher(s);
        return m.matches();    
    }  
    
    
    //checking the menu ID related to provided index
    public int selectedMenu(int index)
    {
                int menuID = 0;
                System.out.println(index);
                
                if(index == 1)
                { menuID = 550000;}
                if(index == 2)
                { menuID = 550001;}
                if(index == 3)
                { menuID = 550002;}
                if(index == 4)
                { menuID = 550003;}
                
                return menuID;    
    }
    
    //method to calculate the restaurant order payment amount
    public String calculate()
    {
        String fooditem = "";
        String type = "";
        String qty = "";        
        String text="";
        String prices = "";
        double total = 0.0;
        StringTokenizer tk1 ;
        int count = 0;
        String itemprice1 = "",itemprice2 = ""; 
        
        for(int i = 0 ;i<data.size();i++)
        {
            text = data.get(i);
            System.out.println("text is : "+text);
            tk1 = new StringTokenizer(text,"-");
            
            while(tk1.hasMoreTokens())
            {
                count++;
                
                if(count==1)
                {
                    fooditem=tk1.nextToken().trim();
                } 
                if(count==2)
                {
                    type=tk1.nextToken();
                } 
                if(count==3)
                {
                    qty=tk1.nextToken();
                    String sql = "SELECT food_price FROM `food_item` WHERE food_name LIKE '%"+fooditem+"%'";
                    System.out.println(sql);            
                
                    try 
                    {
                        ps = con.prepareStatement(sql);
                        rs = ps.executeQuery();
                    
                        while(rs.next())
                        {
                              prices = rs.getString("food_price");   
                              System.out.println("PRI : "+prices);
                        }                  
                    } 
                    catch (Exception ex) 
                    {
                        System.out.println(ex);
                    }
           
                    itemprice1 = prices.substring(5,11);
                    System.out.println("P1 :"+itemprice1);

                    itemprice2 = prices.substring(17);
                    System.out.println("P2 :"+itemprice2);
                
                    if(type.equals("Full"))
                    {
                        total = total + (Integer.parseInt(qty))*(Double.parseDouble(itemprice1)); 
                    }    
                    if(type.equals("Half"))
                    {
                        total = total + (Integer.parseInt(qty))*(Double.parseDouble(itemprice2)); 
                    } 
                    
                } 
            }            
        }
        
        String x = Double.toString(total);        
        return x;
    
    } 
    
    //check if food itmem is already in the list when adding new menu
    public boolean checkList(String foodName,String []arr,int count)
    {
        for(int i=0;i<=count;i++)
        {
            if(foodName.equals(arr[i]))
            {
                return true;
            }
            
        }
        return false;
    }
    
    //fill the relevant details of the items when the order stock panel is loaded
    int stockbcount = 0;
    public void fillItemDetailsInOrderStock()
    {
        clearRequestButton.doClick();
            //jTextField5.setText(null);
        departmentTextField.setText("");
        stockbcount++;
    
        if(stockbcount == 1)
        {
            try{
                //retrieve data to the combo boxes from the database
                String sql = "select item_category_name as 'Select Item Category' from item_category";
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                //data to addStockPurchaseItemCategoryComboBox
                String itemCategory;
                while(rs.next()){
                    itemCategory = rs.getString("Select Item Category");
                    itemCategorycomboBox.addItem(itemCategory);
                }

                sql = "select item_name as 'Select Item Name' from item where item_availability = 'available'";
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                //data to addStockPurchaseItemCategoryComboBox
                String itemName;
                while(rs.next()){
                    itemName = rs.getString("Select Item Name");
                    itemNameComboBox.addItem(itemName);
                }  

                sql = "select item_id as 'Select Item ID' from item where item_availability = 'available'";
                ps= con.prepareStatement(sql);
                rs = ps.executeQuery();
                //data to addStockPurchaseItemCategoryComboBox
                String itemId;
                while(rs.next()){
                    itemId = rs.getString("Select Item ID");
                    itemIdComboBox.addItem(itemId);
                }

                departmentTextField.setText("Restaurant");

            }
            catch(Exception e)
            {

            }        
        } 
    }
    
    
    
    private void removeOrderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOrderMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(true);
        addOrderPanel.setVisible(false);
        updateOrderPanel.setVisible(false);
        removeOrderPanel.setVisible(true);
        searchRemoveButton.setEnabled(false);
        resetRemoveButton.setEnabled(false);
        removeOrderButton.setEnabled(false);
        searchOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
    }//GEN-LAST:event_removeOrderMenuItemActionPerformed

    private void restaurantOrderMenuMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_restaurantOrderMenuMenuKeyPressed
        // TODO add your handling code here:
        //restaurantOrderPanel.setVisible(true);
    }//GEN-LAST:event_restaurantOrderMenuMenuKeyPressed

    private void restaurantOrderMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_restaurantOrderMenuMenuSelected
        // TODO add your handling code here:
        //contentPanel.setVisible(true);
    }//GEN-LAST:event_restaurantOrderMenuMenuSelected

    private void addOrderMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addOrderMenuItemMouseClicked
        // TODO add your handling code here:
        //contentPanel.setVisible(true);
    }//GEN-LAST:event_addOrderMenuItemMouseClicked

    private void addOrderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(true);
        addOrderPanel.setVisible(true);
        addFoodItemsButton.setEnabled(false);
        removeFoodItemButton.setEnabled(false);
        proceedOrderButton.setEnabled(false);
        updateOrderPanel.setVisible(false);
        removeOrderPanel.setVisible(false);
        searchOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        fillMenuIds(menuIdsComboBox);
    }//GEN-LAST:event_addOrderMenuItemActionPerformed

    private void customerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerMenuActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_customerMenuActionPerformed

    private void addCustomerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(true);
        addCustomerPanel.setVisible(true);
        searchCustomerPanel.setVisible(false);
        updateCustomerPanel.setVisible(false);
        roomCustomerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        
        
    }//GEN-LAST:event_addCustomerMenuItemActionPerformed

    private void removeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOrderButtonActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(null,"Are you sure?","Confirm Remove",JOptionPane.YES_NO_OPTION);
       
        if(n==0)
        {
            String removeOrderId="51"+searchRemoveOrderIdTextField.getText();
                       
            String sql1 = "UPDATE `restaurant_order` SET order_status = '0' WHERE restaurant_order_id = '" + removeOrderId + "'";
            System.out.println(sql1);            
            
            try
            {
                ps = con.prepareStatement(sql1);
                ps.execute();                    
                JOptionPane.showMessageDialog(null,"Order Status Updated","Success",JOptionPane.INFORMATION_MESSAGE);
                resetRemoveButton.doClick();
                contentPanel.setVisible(false);
                
            } 
            catch (SQLException ex)
            {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_removeOrderButtonActionPerformed

    private void updateOrderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrderMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(true);
        addOrderPanel.setVisible(false);
        updateOrderPanel.setVisible(true);
        searchUpdateButton.setEnabled(false);
        roomCustomerPanel.setVisible(false);
        removeOrderPanel.setVisible(false);
        searchOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
    }//GEN-LAST:event_updateOrderMenuItemActionPerformed

    private void searchOrderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOrderMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(true);
        addOrderPanel.setVisible(false);
        updateOrderPanel.setVisible(false);
        removeOrderPanel.setVisible(false);
        searchOrderPanel.setVisible(true);
        roomCustomerPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
    }//GEN-LAST:event_searchOrderMenuItemActionPerformed

    private void updateCustomerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(true);
        addCustomerPanel.setVisible(false);
        searchCustomerPanel.setVisible(false);
        updateCustomerPanel.setVisible(true);
        roomCustomerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        
    }//GEN-LAST:event_updateCustomerMenuItemActionPerformed

    private void searchCustomerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(true);
        addCustomerPanel.setVisible(false);
        searchCustomerPanel.setVisible(true);
        updateCustomerPanel.setVisible(false);
        roomCustomerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
    }//GEN-LAST:event_searchCustomerMenuItemActionPerformed

    private void addMenuMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(true);
        addMenuPanel.setVisible(true);
        viewMenuPanel.setVisible(false);
        updateMenuPanel.setVisible(false);
        removeMenuPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        resetAddNewMenuButton.doClick();
        
        //load the food items table
        
        
    }//GEN-LAST:event_addMenuMenuItemActionPerformed

    private void updateMenuMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMenuMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(true);
        addMenuPanel.setVisible(false);
        viewMenuPanel.setVisible(false);
        updateMenuPanel.setVisible(true);
        removeMenuPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        resetUpdatedMenuButton.doClick();
        fillMenuIds(updateMenuMenuIdComboBox);
    }//GEN-LAST:event_updateMenuMenuItemActionPerformed

    private void removeMenuMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(true);
        addMenuPanel.setVisible(false);
        viewMenuPanel.setVisible(false);
        updateMenuPanel.setVisible(false);
        removeMenuPanel.setVisible(true);
        restaurantPaymentPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        fillMenuIds(removeMenuIdComboBox);
    }//GEN-LAST:event_removeMenuMenuItemActionPerformed

    private void viewMenuMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(true);
        addMenuPanel.setVisible(false);
        viewMenuPanel.setVisible(true);
        updateMenuPanel.setVisible(false);
        removeMenuPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        fillMenuIds(viewMenuIdComboBox);
    }//GEN-LAST:event_viewMenuMenuItemActionPerformed

    private void requestStockMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestStockMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(true);
        stockOrderPanel.setVisible(true);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
        fillItemDetailsInOrderStock();
    }//GEN-LAST:event_requestStockMenuItemActionPerformed

    private void menuIdsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIdsComboBoxActionPerformed
        // TODO add your handling code here:
        //create table to add order food items
        menuItemsTable = new javax.swing.JTable();
        menuItemsTable.setModel(new javax.swing.table.DefaultTableModel            
        (
            new Object [][] { }, new String [] { "Item", "Type","Quantity" }
        )
        {
            Class[] type = new Class [] 
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) 
            {
                return type [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) 
            {
                return canEdit [columnIndex];
            }
        }
                
        );
        
        
        addFoodItemsButton.setEnabled(true);
        //buttonAddOrderRemove.setEnabled(true);
        menuItemsScrollPane.setViewportView(menuItemsTable);          
        menuItemsScrollPane.getViewport().setBackground(Color.white); 
        menuItemsTable.setOpaque(false);
        
        menuItemsTable.setGridColor(new Color(42, 135, 235));       
        menuItemsTable.getColumnModel().getColumn(0).setResizable(false);
        menuItemsTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        menuItemsTable.getColumnModel().getColumn(1).setResizable(false);
        menuItemsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        menuItemsTable.getColumnModel().getColumn(2).setResizable(false);
        menuItemsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        
        //setting up the combobox in type column
        setUpTypeColumn(menuItemsTable,menuItemsTable.getColumnModel().getColumn(1));  
        
               
        String selectedMenuId=String.valueOf(menuIdsComboBox.getSelectedItem());
        System.out.println(selectedMenuId);
        
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) orderItemsList.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);  
        String orderdes = "";
        
        String sql="SELECT menu_des FROM menu WHERE menu_id='" + selectedMenuId + "' ";
        try
        {
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            DefaultListModel model = new DefaultListModel();
            orderItemsList.setModel(model);
                   
            while(rs.next())
            {
               orderdes = rs.getString("menu_des");
               StringTokenizer tk1 = new StringTokenizer(orderdes,",");               
             
               while(tk1.hasMoreTokens())
               {
                    model.addElement(tk1.nextToken()+"\n");       
               }
            } 
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_menuIdsComboBoxActionPerformed

    
    //method to set the created Jtable "Type" column in Add Order
    public void setUpTypeColumn(JTable table,TableColumn typeColumn)
    {
        String types[] = {"Full","Half"};
        comboBox = new JComboBox<String>(types);
        comboBox.setBackground(new Color(255, 255, 255));         
        table.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboBox));        
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) table.getDefaultRenderer(Integer.class);
        renderer.setHorizontalAlignment(SwingConstants.CENTER);  
    }
    
    //check whether order Id entered matches with the format
    public boolean checkOrderId(String searchOrderId)
    {
        String orderId = "([0-9][0-9][0-9][0-9])";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(orderId);
        java.util.regex.Matcher m = pattern.matcher(searchOrderId);
        return m.matches();
    }
    
    
    
    private void menuItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuItemsTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuItemsTableMouseClicked

    private void menuItemsTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_menuItemsTableComponentShown
        // TODO add your handling code here:
        comboBox.setSelectedIndex(1);
    }//GEN-LAST:event_menuItemsTableComponentShown

    private void addFoodItemsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodItemsButtonActionPerformed
        // TODO add your handling code here:
       //enable the NEXT button
       proceedOrderButton.setEnabled(true);
       //enable remove button
       removeFoodItemButton.setEnabled(true);
        
       String foodItem=orderItemsList.getSelectedValue();
       //add the selected order items to the table 
       DefaultTableModel model = (DefaultTableModel)menuItemsTable.getModel();       
       model.addRow(new Object[]{foodItem,"Choose Type"});
        
        
    }//GEN-LAST:event_addFoodItemsButtonActionPerformed

    private void removeFoodItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFoodItemButtonActionPerformed
        // TODO add your handling code here:
        //removing items from the order items list
        try
        {
            int row = menuItemsTable.getSelectedRow();        
            String toBeRemoved = menuItemsTable.getValueAt(row, 0).toString();
            DefaultTableModel model = (DefaultTableModel)menuItemsTable.getModel();
            model.removeRow(row);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Row not selected!","Error",JOptionPane.ERROR_MESSAGE);        
        }
    }//GEN-LAST:event_removeFoodItemButtonActionPerformed

    private void searchRemoveOrderIdTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchRemoveOrderIdTextFieldKeyTyped
        // TODO add your handling code here:
        searchRemoveButton.setEnabled(true);
        if(Character.isDigit(evt.getKeyChar())!= true)
        {
            evt.consume();
        }
        if (searchRemoveOrderIdTextField.getText().length()>= 4 ) // limit to 4 digits
        {
            evt.consume();
        }
    }//GEN-LAST:event_searchRemoveOrderIdTextFieldKeyTyped

    private void searchRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRemoveButtonActionPerformed
        // TODO add your handling code here:
        if(!searchRemoveOrderIdTextField.getText().equals(""))
        {
            String removeOrderId="51"+searchRemoveOrderIdTextField.getText();//get the order id to be removed
            System.out.println(removeOrderId);

            String sql="SELECT restaurant_order_id AS 'Order ID',restaurant_customer_nic AS 'Customer NIC',order_menu_id AS 'Order Menu ID',order_des AS 'Order Description',order_date AS 'Order Date' FROM restaurant_order WHERE restaurant_order_id='" + removeOrderId + "'";

            try
            {
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                removeOrderTable.setModel(DbUtils.resultSetToTableModel(rs));//set the resultsset to the table
                removeOrderButton.setEnabled(true);
                resetRemoveButton.setEnabled(true);
                
                if(removeOrderTable.getRowCount()==0)
                {
                    JOptionPane.showMessageDialog(null,"No Such Record!","Error",JOptionPane.ERROR_MESSAGE);

                }
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Invalid Data!","Error",JOptionPane.ERROR_MESSAGE); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Order Id Not Entered!","Error",JOptionPane.ERROR_MESSAGE); 
        }
        
    }//GEN-LAST:event_searchRemoveButtonActionPerformed

    private void resetRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetRemoveButtonActionPerformed
        // TODO add your handling code here:
        searchRemoveOrderIdTextField.setText("");      
        
        removeOrderTable = new javax.swing.JTable();
        removeOrderTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
        }
        ) {
        Class[] types = new Class [] {
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
        false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
        }
        });

        removeOrderTable.setEnabled(false);
        removeOrderTable.setGridColor(new java.awt.Color(51, 153, 255));
        jScrollPane5.setViewportView(removeOrderTable);
    }//GEN-LAST:event_resetRemoveButtonActionPerformed

    private void searchUpdateOrderIdTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchUpdateOrderIdTextFieldKeyTyped
        // TODO add your handling code here:
        searchUpdateButton.setEnabled(true);
        if(Character.isDigit(evt.getKeyChar())!= true)
        {
            evt.consume();
        }
        if (searchUpdateOrderIdTextField.getText().length()>= 4 ) // limit to 4 digits
        {
            evt.consume();
        }
    }//GEN-LAST:event_searchUpdateOrderIdTextFieldKeyTyped

    private void searchUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUpdateButtonActionPerformed
        // TODO add your handling code here:
        fillMenuIds(menuIdComboBox);
        if(!searchUpdateOrderIdTextField.getText().equals(""))
        {
            String updateOrder="51"+searchUpdateOrderIdTextField.getText();//get the order id to be updated
            System.out.println(updateOrder);

            String sql="SELECT restaurant_order_id AS 'Order ID',restaurant_customer_nic AS 'Customer NIC',order_menu_id AS 'Order Menu ID',order_des AS 'Order Description',order_date AS 'Order Date' FROM restaurant_order WHERE restaurant_order_id='" + updateOrder + "'";

            try
            {
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                updateOrderTable.setModel(DbUtils.resultSetToTableModel(rs));//set the resultsset to the table

                if(updateOrderTable.getRowCount()==0)
                {
                    JOptionPane.showMessageDialog(null,"No Such Record!","Error",JOptionPane.ERROR_MESSAGE);

                }
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Invalid Data!","Error",JOptionPane.ERROR_MESSAGE); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Order Id Not Entered!","Error",JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_searchUpdateButtonActionPerformed

    private void menuIdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIdComboBoxActionPerformed
        // TODO add your handling code here:
        //create table to add order food items
        orderNewItemsTable = new javax.swing.JTable();
        orderNewItemsTable.setModel(new javax.swing.table.DefaultTableModel            
        (
            new Object [][] { }, new String [] { "Item", "Type","Quantity" }
        )
        {
            Class[] type = new Class [] 
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) 
            {
                return type [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) 
            {
                return canEdit [columnIndex];
            }
        }
                
        );
        
        
        addNewFoodItemButton.setEnabled(true);
        //buttonAddOrderRemove.setEnabled(true);
        orderNewItemsScrollPane.setViewportView(orderNewItemsTable);          
        orderNewItemsScrollPane.getViewport().setBackground(Color.white); 
        orderNewItemsTable.setOpaque(false);
        
        orderNewItemsTable.setGridColor(new Color(42, 135, 235));       
        orderNewItemsTable.getColumnModel().getColumn(0).setResizable(false);
        orderNewItemsTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        orderNewItemsTable.getColumnModel().getColumn(1).setResizable(false);
        orderNewItemsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        orderNewItemsTable.getColumnModel().getColumn(2).setResizable(false);
        orderNewItemsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        
        //setting up the combobox in type column
       setUpTypeColumn(orderNewItemsTable,orderNewItemsTable.getColumnModel().getColumn(1));  
        
               
        String selectedMenuId=String.valueOf(menuIdComboBox.getSelectedItem());
        System.out.println(selectedMenuId);
        
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) orderNewItemsList.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);  
        String orderdes = "";
        
        String sql="SELECT menu_des FROM menu WHERE menu_id='" + selectedMenuId + "' ";
        try
        {
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            DefaultListModel model = new DefaultListModel();
            orderNewItemsList.setModel(model);
                   
            while(rs.next())
            {
               orderdes = rs.getString("menu_des");
               StringTokenizer tk1 = new StringTokenizer(orderdes,",");               
             
               while(tk1.hasMoreTokens())
               {
                    model.addElement(tk1.nextToken()+"\n");       
               }
            } 
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_menuIdComboBoxActionPerformed

    private void addNewFoodItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewFoodItemButtonActionPerformed
        // TODO add your handling code here:
        
       String foodItem=orderNewItemsList.getSelectedValue();//get the selected food item from the list
       //add the selected order items to the table 
       DefaultTableModel model = (DefaultTableModel)orderNewItemsTable.getModel();       
       model.addRow(new Object[]{foodItem,"Choose Type"});
    }//GEN-LAST:event_addNewFoodItemButtonActionPerformed

    private void orderNewItemsTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_orderNewItemsTableComponentShown
        // TODO add your handling code here:
        comboBox.setSelectedIndex(1);
    }//GEN-LAST:event_orderNewItemsTableComponentShown

    private void orderNewItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderNewItemsTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_orderNewItemsTableMouseClicked

    private void removeNewFoodItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeNewFoodItemButtonActionPerformed
        // TODO add your handling code here:
        //removing items from the order items list
        try
        {
            int row = orderNewItemsTable.getSelectedRow();        
            String toBeRemoved = orderNewItemsTable.getValueAt(row, 0).toString();
            DefaultTableModel model = (DefaultTableModel)orderNewItemsTable.getModel();
            model.removeRow(row);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Row not selected!","Error",JOptionPane.ERROR_MESSAGE);        
        }
    }//GEN-LAST:event_removeNewFoodItemButtonActionPerformed

    private void searchOrderIdTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderIdTextFieldKeyTyped
        // TODO add your handling code here:
        
        if(Character.isDigit(evt.getKeyChar())!= true)
        {
            evt.consume();
        }
        if (searchOrderIdTextField.getText().length()>= 4 ) // limit to 4 digits
        {
            evt.consume();
        }
        
    }//GEN-LAST:event_searchOrderIdTextFieldKeyTyped

    private void searchOrderNicTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderNicTextFieldKeyTyped
        // TODO add your handling code here:
        if(Character.isDigit(evt.getKeyChar())!= true)
        {
            evt.consume();
        }
        if (searchOrderNicTextField.getText().length()>= 9 ) // limit to 9 digits
        {
            evt.consume();
        }
    }//GEN-LAST:event_searchOrderNicTextFieldKeyTyped

    private void searchOrderDateDateChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchOrderDateDateChooserMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchOrderDateDateChooserMouseClicked

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String orderId="51"+searchOrderIdTextField.getText();//get the chosen orderid
        String nic=searchOrderNicTextField.getText()+"V";//get the customer nic to be searched
        /*if(!nic.equals("V"))
        {
            if(!isNICValid(nic))
            {
                JOptionPane.showMessageDialog(null,"NIC not valid!","Error",JOptionPane.ERROR_MESSAGE);
            }
        }*/
        
        String datex = "";
        //order date validation
        try
        {
            String s = ((JTextField)searchOrderDateDateChooser.getDateEditor().getUiComponent()).getText();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            datex = sdf.format(searchOrderDateDateChooser.getDate());
        
            if(s.equals(""))
            {
                dvalidity = false;
            }
            else
            {
                dvalidity = true;
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        } 
       
        //search by Order ID
        if((ovalidity)||!(dvalidity)||!(cvalidity))
        {
            String sql = "SELECT o.restaurant_order_id AS 'Order ID',o.restaurant_customer_nic AS 'Customer NIC',o.order_menu_id AS 'Order Menu ID',o.order_des AS 'Order Description',o.order_date AS 'Order Date' FROM restaurant_order o,restaurant_payment p WHERE o.restaurant_order_id = p.restaurant_payment_order_id AND o.restaurant_order_id = '"+orderId+"'";
            System.out.println(sql);
            try 
            {
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                orderSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                
                
            } 
            catch (SQLException ex) 
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Invalid Data!","Error",JOptionPane.ERROR_MESSAGE);
                
            }
        
        } 
         
        
        if((dvalidity)||(cvalidity)||(ovalidity))
        {
                                              
            String sql = "SELECT o.restaurant_order_id AS 'Order ID',o.restaurant_customer_nic AS 'Customer NIC',o.order_menu_id AS 'Order Menu ID',o.order_des AS 'Order Description',o.order_date AS 'Order Date',p.restaurant_payment_id AS 'Payment ID' FROM restaurant_order o,restaurant_payment p WHERE o.restaurant_order_id = p.restaurant_payment_order_id AND CAST(o.restaurant_order_id as CHAR) LIKE '%"+orderId+"%' AND CAST(o.restaurant_customer_nic as CHAR) LIKE '%"+nic+"%'"
                   + "AND o.order_date LIKE '%"+datex+"%'";
            
            System.out.println(sql);
            try
            {
               ps = con.prepareStatement(sql);
               rs= ps.executeQuery();
               orderSearchTable.setModel(DbUtils.resultSetToTableModel(rs)); //loading the query results 
            }
            catch (SQLException ex)
            {
               System.out.println(ex);
            }
		
            
        }
        
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void customerNicTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNicTextFieldKeyTyped
        // TODO add your handling code here:
        customerNicTextField.setBackground(new Color(255, 255, 255));
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(customerNicTextField.getText().length()>=9)
        {
            evt.consume();
        }
    }//GEN-LAST:event_customerNicTextFieldKeyTyped

    private void customerFNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerFNameTextFieldKeyTyped
        // TODO add your handling code here:
        customerFNameTextField.setBackground(new Color(255, 255, 255));
        if(!Character.isAlphabetic(evt.getKeyChar()))
        {
            evt.consume();
        }
    }//GEN-LAST:event_customerFNameTextFieldKeyTyped

    private void customerNicTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNicTextFieldKeyReleased
        // TODO add your handling code here:
        //transfer the mousepointer to the next field to be filled in once all the 9 digits are filled in
        if(customerNicTextField.getText().length()==10)
        {
            String sql="SELECT ";
            
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();
            
        }
    }//GEN-LAST:event_customerNicTextFieldKeyReleased

    private void customerFNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerFNameTextFieldKeyPressed
        // TODO add your handling code here:
        //transfer the mousepointer to the next field to be filled in when user presses the Enter key
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();

        }
    }//GEN-LAST:event_customerFNameTextFieldKeyPressed

    private void countryCodeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_countryCodeTextFieldKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_countryCodeTextFieldKeyPressed

    private void countryCodeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_countryCodeTextFieldKeyTyped
        // TODO add your handling code here:
        countryCodeTextField.setBackground(new Color(255, 255, 255));
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(countryCodeTextField.getText().length()>=3)
        {
            evt.consume();
        }
        
    }//GEN-LAST:event_countryCodeTextFieldKeyTyped

    private void countryCodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_countryCodeTextFieldKeyReleased
        // TODO add your handling code here:
        if(countryCodeTextField.getText().length()==3)
        {
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();
        }
    }//GEN-LAST:event_countryCodeTextFieldKeyReleased

    private void customerLNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerLNameTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerLNameTextFieldKeyPressed

    private void customerLNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerLNameTextFieldKeyTyped
        // TODO add your handling code here:
        customerLNameTextField.setBackground(new Color(255, 255, 255));
        if(!Character.isAlphabetic(evt.getKeyChar()))
        {
            evt.consume();
        }
        
    }//GEN-LAST:event_customerLNameTextFieldKeyTyped

    private void areaCodeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaCodeTextFieldKeyTyped
        // TODO add your handling code here:
        areaCodeTextField.setBackground(new Color(255, 255, 255));
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(areaCodeTextField.getText().length()>=2)
        {
            evt.consume();
        }
    }//GEN-LAST:event_areaCodeTextFieldKeyTyped

    private void phonePart1TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonePart1TextFieldKeyTyped
        // TODO add your handling code here:
        phonePart1TextField.setBackground(new Color(255, 255, 255));
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(phonePart1TextField.getText().length()>=3)
        {
            evt.consume();
        }
    }//GEN-LAST:event_phonePart1TextFieldKeyTyped

    private void phonePart2TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonePart2TextFieldKeyTyped
        // TODO add your handling code here:
        phonePart2TextField.setBackground(new Color(255, 255, 255));
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(phonePart2TextField.getText().length()>=4)
        {
            evt.consume();
        }
    }//GEN-LAST:event_phonePart2TextFieldKeyTyped

    private void areaCodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaCodeTextFieldKeyReleased
        // TODO add your handling code here:
        if(areaCodeTextField.getText().length()==2)
        {
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();
        }
    }//GEN-LAST:event_areaCodeTextFieldKeyReleased

    private void phonePart1TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonePart1TextFieldKeyReleased
        // TODO add your handling code here:
        if(phonePart1TextField.getText().length()==3)
        {
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();
        }
    }//GEN-LAST:event_phonePart1TextFieldKeyReleased

    private void phonePart2TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonePart2TextFieldKeyReleased
        // TODO add your handling code here:
        if(phonePart2TextField.getText().length()==4)
        {
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();
        }
    }//GEN-LAST:event_phonePart2TextFieldKeyReleased

    boolean updateorder = false;
    private void updateOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrderButtonActionPerformed
        // TODO add your handling code here:
        if(searchUpdateOrderIdTextField.getText().equals(""))
        {
             JOptionPane.showMessageDialog(null,"Invalid Data", "Warning",JOptionPane.WARNING_MESSAGE); 
        }    
        else
        {
            updateOrderID="51"+searchUpdateOrderIdTextField.getText();//keeping the order id needed to updated so that it can be used in the Payment panel to update the relevant order
            int n = JOptionPane.showConfirmDialog(null,"Are you sure?","Confirm Update",JOptionPane.YES_NO_OPTION);

            if(n ==0)
            {   
                updateorder = true;
                int selectedmenuID=Integer.parseInt(menuIdComboBox.getSelectedItem().toString());
                boolean flag = true;

                //SAVING ORDER DATA
                try
                {
                    for (int count = 0; count < orderNewItemsTable.getRowCount(); count++)
                    {   
                        String item = orderNewItemsTable.getValueAt(count, 0).toString();
                        String type = orderNewItemsTable.getValueAt(count, 1).toString();
                        String qty = orderNewItemsTable.getValueAt(count, 2).toString();

                        if((qtyValidation(qty)) && (flag==true))
                        {
                            data.add(item+"-"+type+"-"+qty+"-");
                        }
                        else 
                        {
                            if(flag==false)
                                JOptionPane.showMessageDialog(null,"Invalid Quantity", "Warning",JOptionPane.WARNING_MESSAGE);                  
                        }
                    }

                    orderdetails[0] = Integer.toString(selectedmenuID);
                    System.out.println(data); 
                    System.out.println("DATA : "+data.get(0));           
                    
                    //payment panel order description show
                    paymentOrderDescriptionTextArea.setEditable(false);
                    paymentMenuIdLabel.setText(orderdetails[0]);
                    for(int i = 0 ;i<data.size();i++)
                    {
                        paymentOrderDescriptionTextArea.append(data.get(i)+"\n");
                    }
                    Double orderAmount = Double.parseDouble(calculate());
                    paymentAmountTextField.setText(String.format("%.2f", orderAmount)); //calculates the amount and displays
                    orderdetails[4] = paymentAmountTextField.getText();
                   
                    //redirecting to Add Payment from Update order
                    contentPanel.setVisible(true);
                    restaurantOrderPanel.setVisible(false);
                    customerPanel.setVisible(false);
                    restaurantPaymentPanel.setVisible(true);
                    menuPanel.setVisible(false);
                    otherOrderPanel.setVisible(false);
                    employeePanel.setVisible(false);
                    orderStockPanel.setVisible(false);
                    maintenancePanel.setVisible(false);
                    reportsPanel.setVisible(false);

                    
                
                }
                catch(Exception e)
                {
                    updateOrderButton.setEnabled(false);
                    JOptionPane.showMessageDialog(null,"Invalid Data","Error",JOptionPane.ERROR_MESSAGE);               
                }

            } 
        }
    }//GEN-LAST:event_updateOrderButtonActionPerformed

    private void resetAddNewMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAddNewMenuButtonActionPerformed
        // TODO add your handling code here:
        menuPriceTextField.setText("");
        
        String sql = "SELECT food_id AS 'Food ID', food_name AS 'Food Name', food_price AS 'Food Price' FROM food_item WHERE food_item_status = '1'";
            
        try 
        {
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            foodItemsTable.setModel(DbUtils.resultSetToTableModel(rs));
           
        } 
        catch (SQLException ex) 
        {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null,"Error Retrieving Data!","Error",JOptionPane.ERROR_MESSAGE);                
        }
        
        try
        {
            DefaultListModel listModel = (DefaultListModel) newMenuItemsList.getModel();
            listModel.removeAllElements();
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_resetAddNewMenuButtonActionPerformed

    DefaultListModel modelx = new DefaultListModel();
    int count = 0;
    String []arr=new String[50]; //store list items  
    java.util.List<String> datac = new ArrayList<String>();
    private void addNewMenuItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewMenuItemButtonActionPerformed
        // TODO add your handling code here:
        int foodCount=0;
        int row = foodItemsTable.getSelectedRow();        
        String foodname = foodItemsTable.getValueAt(row, 1).toString();
        Object x=(Object)(foodname);
        if(count==0)
        {
            newMenuItemsList.setModel(modelx);
            //modelx.addElement(foodname+"\n");
        }
        /*else
        {
            for(int i=0;i<=arr.length;i++)
            {   
                 if(arr[i].equals(foodname))
                 {
                     foodCount++;
                 }

            }
            
            
            
        }*/
        //System.out.println(count);
        //arr[count]=foodname;
        modelx.addElement(foodname+"\n");
        count++;
        
        
        
    }//GEN-LAST:event_addNewMenuItemButtonActionPerformed
    
    
    private void viewMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuButtonActionPerformed
        // TODO add your handling code here:
        String id = viewMenuIdComboBox.getSelectedItem().toString();
      
        if(viewMenuIdComboBox.getSelectedIndex()==0)
        {
             JOptionPane.showMessageDialog(null,"Select Menu Id", "Warning",JOptionPane.WARNING_MESSAGE); 
        } 
        else
        {
            DefaultListCellRenderer renderer = (DefaultListCellRenderer) viewMenuList.getCellRenderer();
            renderer.setHorizontalAlignment(SwingConstants.CENTER);  
            String orderdes = ""; //compile error prevention
            String x = "";
            //showing menu items on list         
            String sql = "SELECT menu_des, menu_price, menu_status FROM menu WHERE menu_id = '" + id + "'";

            System.out.println(sql);
            try 
            {
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();

                DefaultListModel model = new DefaultListModel();
                viewMenuList.setModel(model);

                while(rs.next())
                {
                    orderdes = rs.getString("menu_des");
                    StringTokenizer tk1 = new StringTokenizer(orderdes,",");               

                    while(tk1.hasMoreTokens())
                    {
                        model.addElement(tk1.nextToken()+"\n");       
                    }

                    x = rs.getString("menu_price");
                    System.out.println(x);
                    viewMenuPriceTextField.setText(x);           

                    String st = "";
                    if(rs.getString("menu_status").equals("1"))
                    {
                        st = "Available";
                    }
                    else
                    { 
                        st = "Not Available";
                    }
                    viewMenuStatusTextField.setText(st);

                }



            }            
            catch (Exception ex) 
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Error Retrieving Data!","Error",JOptionPane.ERROR_MESSAGE); 
            }
        }
           
           
           
       
    }//GEN-LAST:event_viewMenuButtonActionPerformed

    private void viewMenuResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuResetButtonActionPerformed
        // TODO add your handling code here:
        
        viewMenuStatusTextField.setText("");
        viewMenuPriceTextField.setText("");      
        try
        {
            DefaultListModel listModel = (DefaultListModel) viewMenuList.getModel();
            listModel.removeAllElements();
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_viewMenuResetButtonActionPerformed

    private void changeStatusOfRoomOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeStatusOfRoomOrderButtonActionPerformed
        // TODO add your handling code here:
        String orderId = roomServiceOrderIdTextField.getText();
        if(orderId.equals("")|| orderId==null)
        {
            JOptionPane.showMessageDialog(null,"Order not selected!","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            String sql = "UPDATE room_roomserviceorders SET room_restaurant_status = '1' WHERE room_roomserviceorders_rsid = '"+orderId+"'";  
            try
            {
                ps = con.prepareStatement(sql);
                ps.execute();        
                JOptionPane.showMessageDialog(null,"Success","Success",JOptionPane.INFORMATION_MESSAGE); 

            } 
            catch (SQLException ex) 
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Error Updating Status!","Error",JOptionPane.ERROR_MESSAGE);            
            }
        }
                       
        
    }//GEN-LAST:event_changeStatusOfRoomOrderButtonActionPerformed

    private void searchAllEmployeesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAllEmployeesButtonActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT * FROM hr_employee WHERE employee_department = 'Restaurant'";  
        try
        {
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();            
            employeeInfoTable.setModel(DbUtils.resultSetToTableModel(rs));            
        } 
        catch (SQLException ex) 
        {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null,"Error Retrieving Data!","Error",JOptionPane.ERROR_MESSAGE);            
        }
    }//GEN-LAST:event_searchAllEmployeesButtonActionPerformed

    private void employeeIdTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeIdTextFieldKeyTyped
        // TODO add your handling code here:
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        
        if(employeeIdTextField.getText().length()>=4)
        {
            evt.consume();
        }
        
    }//GEN-LAST:event_employeeIdTextFieldKeyTyped

    private void searchSingleEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSingleEmployeeButtonActionPerformed
        // TODO add your handling code here:
        String emp = "21"+employeeIdTextField.getText();
        String sql = "SELECT * FROM hr_employee WHERE employee_id = '"+emp+"' AND employee_department = 'Restaurant'";  
        try 
        {
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            employeeInfoTable.setModel(DbUtils.resultSetToTableModel(rs));
        } 
        catch(SQLException ex) 
        {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null,"Error Retrieving Data!","Error",JOptionPane.ERROR_MESSAGE);            

        }
    }//GEN-LAST:event_searchSingleEmployeeButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        employeePanel.setVisible(true);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resetOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetOrderButtonActionPerformed
        // TODO add your handling code here:
        //reset the add order panel
        try
        {
            DefaultListModel listModel = (DefaultListModel) orderItemsList.getModel();
            listModel.removeAllElements();
        }
        catch(Exception e)
        {}
        
        menuIdsComboBox.setSelectedIndex(0); 
        addFoodItemsButton.setEnabled(false);
        removeFoodItemButton.setEnabled(false);
                
        menuItemsTable = new javax.swing.JTable();

        menuItemsTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
        ){public boolean isCellEditable(int row, int column){return false;}});

        menuItemsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
        public void componentShown(java.awt.event.ComponentEvent evt) {
        menuItemsTableComponentShown(evt);
        }
        });

        menuItemsScrollPane.setViewportView(menuItemsTable);
    }//GEN-LAST:event_resetOrderButtonActionPerformed

    private void proceedOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedOrderButtonActionPerformed
        // TODO add your handling code here:
        int selectedmenuID=Integer.parseInt(menuIdsComboBox.getSelectedItem().toString());
        boolean flag = true;
        
        //SAVING ORDER DATA
        try
        {
            for (int count = 0; count < menuItemsTable.getRowCount(); count++)
            {   
                String item = menuItemsTable.getValueAt(count, 0).toString();
                String type = menuItemsTable.getValueAt(count, 1).toString();
                //System.out.println(type);
                String qty = menuItemsTable.getValueAt(count, 2).toString();
                if(type.equals("Full")|| type.equals("Half"))
                {
                    if((qtyValidation(qty)) && (flag==true))
                    {
                        data.add(item+"-"+type+"-"+qty+"-");
                    }
                    else 
                    {
                        //if(flag==false)
                        JOptionPane.showMessageDialog(null,"Invalid Quantity", "Warning",JOptionPane.WARNING_MESSAGE);  
                        flag=false;
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"Type not selected", "Warning",JOptionPane.WARNING_MESSAGE);
                    flag=false;
                }
            }
            
            orderdetails[0] = Integer.toString(selectedmenuID);
            //System.out.println(data); 
            //System.out.println("DATA : "+data.get(0)); 
            
            Double payementAmount=Double.parseDouble(calculate());
           
            if((checkTokenCheckBox.isSelected())&& (flag==true))
            {
                contentPanel.setVisible(true);
                restaurantOrderPanel.setVisible(false);
                customerPanel.setVisible(true);
                addCustomerPanel.setVisible(false);
                searchCustomerPanel.setVisible(false);
                updateCustomerPanel.setVisible(false);
                roomCustomerPanel.setVisible(true);
                restaurantPaymentPanel.setVisible(false);
                menuPanel.setVisible(false);
                otherOrderPanel.setVisible(false);
                employeePanel.setVisible(false);
                orderStockPanel.setVisible(false);
                maintenancePanel.setVisible(false);
                reportsPanel.setVisible(false);
                
                //add order details to the text boxes if the customer is alreadly existing
                existingCustomerOrderMenuIdTextField.setText(orderdetails[0]);
                for(int i = 0 ;i<data.size();i++)
                {
                    existingCustomerOrderDescriptionTextArea.append(data.get(i)+"\n");
                }
                Double orderAmount = Double.parseDouble(calculate());
                orderAmountTextField.setText(String.format("%.2f", orderAmount)); //calculates the amount and displays
            }
            else
            {
                if(flag==true)
                {
                    contentPanel.setVisible(true);
                    restaurantOrderPanel.setVisible(false);
                    customerPanel.setVisible(true);
                    addCustomerPanel.setVisible(true);
                    searchCustomerPanel.setVisible(false);
                    updateCustomerPanel.setVisible(false);
                    roomCustomerPanel.setVisible(false);
                    restaurantPaymentPanel.setVisible(false);
                    menuPanel.setVisible(false);
                    otherOrderPanel.setVisible(false);
                    employeePanel.setVisible(false);
                    orderStockPanel.setVisible(false);
                    maintenancePanel.setVisible(false);
                    reportsPanel.setVisible(false);
                }
            }
            
            
        }
        catch(Exception e)
        {
                //proceedOrderButton.setEnabled(false);
                JOptionPane.showMessageDialog(null,"Invalid Data","Error",JOptionPane.ERROR_MESSAGE);               
        }
        
    }//GEN-LAST:event_proceedOrderButtonActionPerformed

    private void customerLNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerLNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerLNameTextFieldActionPerformed

    private void existingCustomerNicTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerNicTextFieldKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_existingCustomerNicTextFieldKeyReleased

    private void existingCustomerNicTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerNicTextFieldKeyTyped
        // TODO add your handling code here:
        existingCustomerNicTextField.setBackground(new Color(255, 255, 255));
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(existingCustomerNicTextField.getText().length()>=9)
        {
            evt.consume();
        }
        
        
    }//GEN-LAST:event_existingCustomerNicTextFieldKeyTyped

    private void existingCustomerNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerNameTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_existingCustomerNameTextFieldKeyPressed

    private void existingCustomerNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerNameTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_existingCustomerNameTextFieldKeyTyped

    private void orderAmountTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderAmountTextFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_orderAmountTextFieldKeyReleased

    private void orderAmountTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderAmountTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_orderAmountTextFieldKeyTyped

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        
        String phone =  countryCodeTextField.getText() + "-" + areaCodeTextField.getText() +
        "-" + phonePart1TextField.getText() +"-" +phonePart2TextField.getText();
        String customerName=customerFNameTextField.getText()+customerLNameTextField.getText();
        boolean x = isPhoneNumberValid(phone);
        System.out.println("isNumber? "+x);
        boolean y =isValidEmailAddress(eMailTextField.getText());
        System.out.println("isEmail? "+y);
        boolean z =isNICValid(customerNicTextField.getText()+"V");
        System.out.println("isNIC? "+z);

        
        if(x==false)
        {
            countryCodeTextField.setBackground(new Color(255, 150, 150));
            areaCodeTextField.setBackground(new Color(255, 150, 150));
            phonePart1TextField.setBackground(new Color(255, 150, 150));
            phonePart2TextField.setBackground(new Color(255, 150, 150));
        }
        if(y==false)
        {
            eMailTextField.setBackground(new Color(255, 150, 150));
        }
        if(z==false)
        {
            customerNicTextField.setBackground(new Color(255, 150, 150));
        }

        if(customerName.equals(""))
        {
            customerFNameTextField.setBackground(new Color(255, 150, 150));
            customerLNameTextField.setBackground(new Color(255, 150, 150));
        }
        
        

        if((x==true)&&(y==true)&&(z==true))
        {
            //redirecting to Add Payment from Add Customer
            contentPanel.setVisible(true);
            restaurantOrderPanel.setVisible(false);
            customerPanel.setVisible(false);
            restaurantPaymentPanel.setVisible(true);
            menuPanel.setVisible(false);
            otherOrderPanel.setVisible(false);
            employeePanel.setVisible(false);
            orderStockPanel.setVisible(false);
            maintenancePanel.setVisible(false);
            reportsPanel.setVisible(false);

            //SAVING CURRENT DATA
            orderdetails[1] = customerName;
            orderdetails[2] = phone;
            orderdetails[3] = eMailTextField.getText();
            orderdetails[5] = customerNicTextField.getText()+"V";

            //payment panel order description show
            paymentOrderDescriptionTextArea.setEditable(false);
            paymentMenuIdLabel.setText(orderdetails[0]);
            for(int i = 0 ;i<data.size();i++)
            {
                paymentOrderDescriptionTextArea.append(data.get(i)+"\n");
            }
            Double orderAmount = Double.parseDouble(calculate());
            paymentAmountTextField.setText(String.format("%.2f", orderAmount)); //calculates the amount and displays
            orderdetails[4] = paymentAmountTextField.getText();

        }
        
    }//GEN-LAST:event_nextButtonActionPerformed

    private void demoAddCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoAddCustomerButtonActionPerformed
        // TODO add your handling code here:
        customerNicTextField.setText("957986577");
        customerFNameTextField.setText("Nimal");
        customerLNameTextField.setText("Perera");
        areaCodeTextField.setText("76");
        phonePart1TextField.setText("923");
        phonePart2TextField.setText("5676");
        eMailTextField.setText("nimalperera@yahoo.com");
    }//GEN-LAST:event_demoAddCustomerButtonActionPerformed

    private void eMailTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eMailTextFieldKeyTyped
        // TODO add your handling code here:
        eMailTextField.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_eMailTextFieldKeyTyped

    private void paymentDoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentDoneButtonActionPerformed
        // TODO add your handling code here:
        if(updateorder == false) //new order
        {   
            //System.out.println("When done is clicked"+updateorder);
            String menuid = paymentMenuIdLabel.getText();
            String order = paymentOrderDescriptionTextArea.getText();
            int status = 1;
            String type ="";
            String amt = paymentAmountTextField.getText();
            int cashOrCredit = paymentMethodComboBox.getSelectedIndex();
            //String cashflowm = "";
            if(cashOrCredit==0)
            {
                type = "Cash";
                //cashflowm = "Money";
            }
            else 
            {
                type = "Credit Card";
                //cashflowm = "Bank";
            }             
                       
            //adding data to database
            String day = year + "-" + month + "-" + date ;
            String sql1 = "INSERT INTO restaurant_customer VALUES ('"+orderdetails[5]+"','"+orderdetails[1]+"','"+orderdetails[2]+"','"+orderdetails[3]+"')";
            String sql2 = "INSERT INTO restaurant_order (restaurant_customer_nic,order_menu_id,order_des,order_date,order_status) VALUES ('"+orderdetails[5]+"','"+menuid+"','"+order+"','"+day+"','"+status+"')";
            String sql3 = "SELECT order_menu_id FROM restaurant_order WHERE restaurant_customer_nic  = '"+orderdetails[5]+"'";
            String sql4 = "SELECT order_date FROM restaurant_order WHERE restaurant_customer_nic  = '"+orderdetails[5]+"'";
            String sql5 = "SELECT order_des FROM restaurant_order WHERE restaurant_customer_nic  = '"+orderdetails[5]+"'";
            
            
            String omi = "",od = "",odes = "";
            int id= 0;
            try 
            {
                    
                ps = con.prepareStatement(sql1);
                ps.execute();

                ps = con.prepareStatement(sql2);
                ps.execute();

                ps = con.prepareStatement(sql3);
                rs = ps.executeQuery();                    
                while(rs.next())
                omi = rs.getString("order_menu_id");
                System.out.println(omi);
                ps = con.prepareStatement(sql4);
                rs = ps.executeQuery();
                while(rs.next())
                od = rs.getString("order_date");
                System.out.println(od);
                ps = con.prepareStatement(sql5);
                rs = ps.executeQuery();
                while(rs.next())
                odes = rs.getString("order_des"); 
                System.out.println(odes);

                String sql6 = "SELECT * FROM restaurant_order WHERE restaurant_customer_nic  = '"+orderdetails[5]+"' AND order_menu_id = '"+omi+"' AND order_date = '"+od+"' AND order_des = '"+odes+"'";
                ps = con.prepareStatement(sql6);                   
                rs = ps.executeQuery();
                while(rs.next())
                {
                    id = rs.getInt("restaurant_order_id");
                    System.out.println(id);                   
                }

                String sql7 = "INSERT INTO restaurant_payment (restaurant_payment_cashier_id,restaurant_payment_customer_nic,restaurant_payment_order_id,restaurant_payment_amount,restaurant_payment_credit_or_cash) VALUES ('210029','"+orderdetails[5]+"','"+id+"','"+amt+"','"+type+"')";
                ps = con.prepareStatement(sql7);
                ps.execute();
                                    

                JOptionPane.showMessageDialog(null,"Order Added","Success",JOptionPane.INFORMATION_MESSAGE);
                
                //go to welcome screen
                contentPanel.setVisible(false);
                
                               
                //clear all previous details
                paymentOrderDescriptionTextArea.setText("");
                paymentMethodComboBox.setSelectedIndex(0);
                paymentAmountTextField.setText("");
                paymentPaidAmountTextField.setText("");
                paymentBalanceTextField.setText("");
                paymentMenuIdLabel.setText("");
                
                customerNicTextField.setText("");
                customerFNameTextField.setText("");
                customerLNameTextField.setText("");
                countryCodeTextField.setText("");
                areaCodeTextField.setText("");
                phonePart1TextField.setText("");
                phonePart2TextField.setText("");
                eMailTextField.setText("");
                
               
                menuIdsComboBox.setSelectedIndex(0);
                orderItemsList.removeAll();
                DefaultTableModel model = (DefaultTableModel)menuItemsTable.getModel();
                while(model.getRowCount() > 0)
                {
                    for (int i = 0;i< model.getRowCount(); i++)
                    {
                        model.removeRow(i)  ;  
                    }   
                }
                
            } 
            catch (SQLException ex)
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Error Adding Order!","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        if(updateorder == true)
        {   
            String menuid = paymentMenuIdLabel.getText();
            String order = paymentOrderDescriptionTextArea.getText();
            int status = 1;
            String type ="";
            String amt = paymentAmountTextField.getText();
            int cashOrCredit = paymentMethodComboBox.getSelectedIndex();
            //String cashflowm = "";
            if(cashOrCredit==0)
            {
                type = "Cash";
                //cashflowm = "Money";
            }
            else 
            {
                type = "Credit Card";
                //cashflowm = "Bank";
            }
            String day = year + "-" + month + "-" + date ;
            
            String sql1 = "UPDATE restaurant_order SET order_menu_id='"+menuid+"',order_des='"+order+"' WHERE restaurant_order_id='"+updateOrderID+"'";
            String sql2="UPDATE restaurant_payment SET restaurant_payment_amount='"+amt+"',restaurant_payment_credit_or_cash='"+type+"' WHERE restaurant_payment_order_id='"+updateOrderID+"'";
            try
            {
                ps = con.prepareStatement(sql1);
                ps.execute();

                ps = con.prepareStatement(sql2);
                ps.execute();
                
                JOptionPane.showMessageDialog(null,"Order Updated!","Success",JOptionPane.INFORMATION_MESSAGE);
                
                //go to welcome screen
                contentPanel.setVisible(false);
                
                               
                //clear all previous details
                paymentOrderDescriptionTextArea.setText("");
                paymentMethodComboBox.setSelectedIndex(0);
                paymentAmountTextField.setText("");
                paymentPaidAmountTextField.setText("");
                paymentBalanceTextField.setText("");
                paymentMenuIdLabel.setText("");
                
                customerNicTextField.setText("");
                customerFNameTextField.setText("");
                customerLNameTextField.setText("");
                countryCodeTextField.setText("");
                areaCodeTextField.setText("");
                phonePart1TextField.setText("");
                phonePart2TextField.setText("");
                eMailTextField.setText("");
                
                searchUpdateOrderIdTextField.setText("");
                menuIdComboBox.setSelectedIndex(0);
                
                orderNewItemsList.removeAll();
                DefaultTableModel model1 = (DefaultTableModel)orderNewItemsTable.getModel();
                while(model1.getRowCount() > 0)
                {
                    for (int i = 0;i< model1.getRowCount(); i++)
                    {
                        model1.removeRow(i)  ;  
                    }   
                }
                
                DefaultTableModel model2 = (DefaultTableModel)updateOrderTable.getModel();
                while(model2.getRowCount() > 0)
                {
                    for (int i = 0;i< model2.getRowCount(); i++)
                    {
                        model2.removeRow(i)  ;  
                    }   
                }
                
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Error in Updating Order!","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_paymentDoneButtonActionPerformed

    private void paymentPaidAmountTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentPaidAmountTextFieldKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.getFocusOwner().transferFocus();
            double balance=Double.parseDouble(paymentPaidAmountTextField.getText())-Double.parseDouble(paymentAmountTextField.getText());
            String bal=String.valueOf(balance);
            paymentBalanceTextField.setText(bal);
        }
    }//GEN-LAST:event_paymentPaidAmountTextFieldKeyPressed

    private void searchOrderIdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderIdTextFieldKeyReleased
        // TODO add your handling code here:
        if(searchOrderIdTextField.getText().length()==5)
        {
            ovalidity = true;
        }
        
        if((evt.getKeyCode()==KeyEvent.VK_ENTER)|| (evt.getKeyCode()==KeyEvent.VK_TAB))
        {
            searchOrderIdTextField.setBackground(new Color(255, 255, 255));
            searchButton.doClick();
        }
    }//GEN-LAST:event_searchOrderIdTextFieldKeyReleased

    private void searchOrderNicTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderNicTextFieldKeyReleased
        // TODO add your handling code here:
        if(searchOrderIdTextField.getText().length()==10)
        {
            if(isNICValid(searchOrderNicTextField.getText()+"V"))
            {       
                cvalidity = true;//customernic valid
                if((evt.getKeyCode()==KeyEvent.VK_ENTER)|| (evt.getKeyCode()==KeyEvent.VK_TAB))
                {
                    searchOrderNicTextField.setBackground(new Color(255, 255, 255));
                    searchButton.doClick();
                }    
               
            }
        }
        
        
        else
        {       
            cvalidity = false;   
                           
        } 
    }//GEN-LAST:event_searchOrderNicTextFieldKeyReleased

    private void searchOrderReserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOrderReserButtonActionPerformed
        // TODO add your handling code here:
        searchOrderIdTextField.setText("");
        searchOrderNicTextField.setText("");
        //empty the chosen date
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setCalendar(null);
                 
        orderSearchTable = new javax.swing.JTable();
        

        orderSearchTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
        ));

        orderSearchTable.setGridColor(new java.awt.Color(51, 153, 255));
        searchOrderScrollPane.setViewportView(orderSearchTable);        
                
    }//GEN-LAST:event_searchOrderReserButtonActionPerformed

    private void searchOrderNicTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderNicTextFieldKeyPressed
        // TODO add your handling code here:
        searchOrderNicTextField.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_searchOrderNicTextFieldKeyPressed

    private void searchCustomerTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCustomerTextFieldKeyTyped
        // TODO add your handling code here:
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        
        if(searchCustomerTextField.getText().length()>=9)
        {
            evt.consume();
        }
    }//GEN-LAST:event_searchCustomerTextFieldKeyTyped

    private void searchCustomerTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCustomerTextFieldKeyReleased
        // TODO add your handling code here:
        if(searchCustomerTextField.getText().length()==10)
        {
            if(isNICValid(searchCustomerTextField.getText()+"V"))
            {       
                
                if((evt.getKeyCode()==KeyEvent.VK_ENTER)|| (evt.getKeyCode()==KeyEvent.VK_TAB))
                {
                    searchCustomerTextField.setBackground(new Color(255, 255, 255));
                    searchCustomerButton.doClick();
                }    
               
            }
        }
        
    }//GEN-LAST:event_searchCustomerTextFieldKeyReleased

    private void searchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerButtonActionPerformed
        // TODO add your handling code here:
        String cusnic = searchCustomerTextField.getText()+"V";
        //validating the cusnic
        if(isNICValid(cusnic))
        {
            String sql = "SELECT restaurant_customer_nic AS 'Customer NIC', restaurant_customer_name AS 'Customer Name', restaurant_customer_telephone AS 'Customer Telephone', restaurant_customer_email AS 'Customer Email' FROM restaurant_customer WHERE restaurant_customer_nic = '" + cusnic + "'";
            System.out.println(sql);
            try 
            {
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                searchCustomerTable.setModel(DbUtils.resultSetToTableModel(rs)); //loading the query results
                if(searchCustomerTable.getRowCount()==0)
                {
                    JOptionPane.showMessageDialog(null,"No Such Record!","Information",JOptionPane.INFORMATION_MESSAGE);
                }
            } 
            catch (SQLException ex) 
            {
                System.out.println(ex);
            }

            
        }
        else 
        {
            JOptionPane.showMessageDialog(null,"Invalid NIC!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchCustomerButtonActionPerformed

    private void addNewMenuItemButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewMenuItemButtonMousePressed
        // TODO add your handling code here:
        //DefaultListModel model = (DefaultListModel) newMenuItemsList.getModel();
        //DefaultListModel modelx = new DefaultListModel();
        //newMenuItemsList.setModel(modelx);
        /*if (modelx.contains(newMenuItemsList.getSelectedValue()))
        {
            System.out.println("No duplicates please!");
        }
        else modelx.addElement(newMenuItemsList.getSelectedValue());
        
        String foodname = foodItemsTable.getValueAt(row, 1).toString();
        /*if(count==0)
        {
            newMenuItemsList.setModel(modelx);
            //modelx.addElement(foodname+"\n");
        }
        
        arr[count]=modelx.elementAt(count).toString().trim();
        System.out.println(count+" "+arr[count]);
        System.out.println(count);
        
        
        System.out.println(checkList(foodname, arr,count));
        if(checkList(foodname, arr,count))
        {
            modelx.remove(count);
        }*/
        
  
    }//GEN-LAST:event_addNewMenuItemButtonMousePressed

    private void addUpdatedMenuItemButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addUpdatedMenuItemButtonMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_addUpdatedMenuItemButtonMousePressed

    int countx = 0;
    private void addUpdatedMenuItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUpdatedMenuItemButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            int row = foodItemsToUpdateTable.getSelectedRow();        
            String foodname = foodItemsToUpdateTable.getValueAt(row, 1).toString();

            if(countx==0)
            {
                updatedMenuItemsList.setModel(modelx);

            }
            modelx.addElement(foodname+"\n");
            countx++;
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Select food item!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addUpdatedMenuItemButtonActionPerformed

    private void resetUpdatedMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetUpdatedMenuButtonActionPerformed
        // TODO add your handling code here:
        updatedMenuPriceTextField.setText("");
        
        String sql1 = "SELECT food_id AS 'Food ID', food_name AS 'Food Name', food_price AS 'Food Price' FROM food_item WHERE food_item_status = '1'";
           
        try 
        {
            ps = con.prepareStatement(sql1);
            rs = ps.executeQuery();
            foodItemsToUpdateTable.setModel(DbUtils.resultSetToTableModel(rs));
            
            
           
        } 
        catch (SQLException ex) 
        {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null,"Error Retrieving Data!","Error",JOptionPane.ERROR_MESSAGE);                
        }
        
        try
        {
            DefaultListModel listModel = (DefaultListModel) updatedMenuItemsList.getModel();
            listModel.removeAllElements();
        }
        catch(Exception e)
        {
        }
        
    }//GEN-LAST:event_resetUpdatedMenuButtonActionPerformed

    private void removeNewMenuItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeNewMenuItemButtonActionPerformed
        // TODO add your handling code here:
        //remove selected food item
        int index = newMenuItemsList.getSelectedIndex();
        try
        {
            DefaultListModel model = (DefaultListModel) newMenuItemsList.getModel();
             model.remove(index);
        }
       catch(Exception e)
       {}
    }//GEN-LAST:event_removeNewMenuItemButtonActionPerformed

    private void addNewMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewMenuButtonActionPerformed
        // TODO add your handling code here:
        String price = menuPriceTextField.getText();
        java.util.List<String> datac = new ArrayList<String>();
        String menudes = "";
        
        ListModel model = newMenuItemsList.getModel();
        for(int i=0; i < model.getSize(); i++)
        {
            Object o =  model.getElementAt(i); 
            datac.add(o+"");
        }
        System.out.println(datac);

        for(int i = 0 ;i<datac.size();i++)
        {
            menuDescriptionTextArea.append(datac.get(i)); 
        }
        //menudes.concat(datac.get(i)+",");
        menudes = menuDescriptionTextArea.getText();
        if(menudes.equals("")||price.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Check fields!","Error",JOptionPane.ERROR_MESSAGE);
        }
        
               
        if(isDoubleValid(price))
        {



            String sql = "INSERT INTO menu (menu_des,menu_price,menu_status) VALUES ('"+menudes+"','"+price+"','1')";
            System.out.println(sql);
            try 
            {
                ps = con.prepareStatement(sql);
                ps.execute();

                JOptionPane.showMessageDialog(null,"Menu Added!","Success",JOptionPane.INFORMATION_MESSAGE);                
                resetAddNewMenuButton.doClick();
                contentPanel.setVisible(false);

            } 
            catch (SQLException ex) 
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Menu Addition Failed!","Error",JOptionPane.ERROR_MESSAGE);                
            }

        } 
        else
        {
            JOptionPane.showMessageDialog(null,"Menu Price invalid!","Error",JOptionPane.ERROR_MESSAGE);
        }
       
        
        
        
    }//GEN-LAST:event_addNewMenuButtonActionPerformed

    private void menuPriceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_menuPriceTextFieldKeyTyped
        // TODO add your handling code here:
        if(Character.isDigit(evt.getKeyChar())!= true)
        {
            evt.consume();
        }
        if(menuPriceTextField.getText().length()>=5)
        {
            evt.consume();
        }
    }//GEN-LAST:event_menuPriceTextFieldKeyTyped

    private void removeUpdatedMenuItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUpdatedMenuItemButtonActionPerformed
        // TODO add your handling code here:
        //remove selected food item
        int index = updatedMenuItemsList.getSelectedIndex();
        try
        {
            DefaultListModel model = (DefaultListModel) updatedMenuItemsList.getModel();
             model.remove(index);
        }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,"Select Item!","Error",JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_removeUpdatedMenuItemButtonActionPerformed

    private void updateMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMenuButtonActionPerformed
        // TODO add your handling code here:
        String price = updatedMenuPriceTextField.getText();
        String updateMenuId=updateMenuMenuIdComboBox.getSelectedItem().toString();
        java.util.List<String> datac = new ArrayList<String>();
        String menudes = "";
        
        ListModel model = updatedMenuItemsList.getModel();
        for(int i=0; i < model.getSize(); i++)
        {
            Object o =  model.getElementAt(i); 
            datac.add(o+"");
        }
        System.out.println(datac);

        for(int i = 0 ;i<datac.size();i++)
        {
            updatedMenuDescriptionTextArea.append(datac.get(i)); 
        }
        //menudes.concat(datac.get(i)+",");
        menudes = updatedMenuDescriptionTextArea.getText();
        if(menudes.equals("")||price.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Check fields!","Error",JOptionPane.ERROR_MESSAGE);
        }
        
               
        if(isDoubleValid(price))
        {



            String sql = "UPDATE menu SET menu_des='"+menudes+"',menu_price='"+price+"' WHERE menu_id='"+updateMenuId+"'";
            System.out.println(sql);
            try 
            {
                ps = con.prepareStatement(sql);
                ps.execute();

                JOptionPane.showMessageDialog(null,"Menu Updated!","Success",JOptionPane.INFORMATION_MESSAGE);                
                resetUpdatedMenuButton.doClick();
                contentPanel.setVisible(false);

            } 
            catch (SQLException ex) 
            {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null,"Menu Update Failed!","Error",JOptionPane.ERROR_MESSAGE);                
            }

        } 
        else
        {
            JOptionPane.showMessageDialog(null,"Menu Price invalid!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateMenuButtonActionPerformed

    private void updatedMenuPriceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updatedMenuPriceTextFieldKeyTyped
        // TODO add your handling code here:
        if(Character.isDigit(evt.getKeyChar())!= true)
        {
            evt.consume();
        }
        if(updatedMenuPriceTextField.getText().length()>=5)
        {
            evt.consume();
        }
    }//GEN-LAST:event_updatedMenuPriceTextFieldKeyTyped
    
    //Show the customer name and payment amount when the NIc is provided
    private void existingCustomerNicTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerNicTextFieldKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            if(existingCustomerNicTextField.getText().length()<9)
            {
                JOptionPane.showMessageDialog(null,"Invalid NIC","Information",JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                String customerName;
                String customerNic=existingCustomerNicTextField.getText()+"V";
                String sql="SELECT room_customer_name FROM room_customer WHERE room_customer_nic='"+customerNic+"'";
                try
                {
                    ps = con.prepareStatement(sql);
                    rs = ps.executeQuery();

                    if (rs.next())
                    {
                         customerName= rs.getString("room_customer_name");
                         existingCustomerNameTextField.setText(customerName);
                         

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"No Such Record!","Information",JOptionPane.INFORMATION_MESSAGE);//ResultSet is empty
                    }


                }
                catch(Exception e)
                {

                }
            }

        }
    }//GEN-LAST:event_existingCustomerNicTextFieldKeyPressed

    //add the payment amount of restaurant order of a existing customer to his total bill
    private void addOrderOfExistingCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderOfExistingCustomerButtonActionPerformed
        // TODO add your handling code here:
        if(existingCustomerNicTextField.getText().length()<9)
        {
                JOptionPane.showMessageDialog(null,"Error!Check NIC","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            String paymentAmount=orderAmountTextField.getText();
            String customerNic=existingCustomerNicTextField.getText()+"V";
            String menu_id=existingCustomerOrderMenuIdTextField.getText();
            String orderDescription=existingCustomerOrderDescriptionTextArea.getText();
            int status=1;
            String day = year + "-" + month + "-" + date ;
            String order_id="";
                     
            String sql1 = "INSERT INTO roomCustomer_order (room_customer_nic,order_menu_id,order_des,order_date,order_status) VALUES ('"+customerNic+"','"+menu_id+"','"+orderDescription+"','"+day+"','"+status+"')";
            String sql2="SELECT restaurant_order_id FROM roomCustomer_order WHERE room_customer_nic='"+customerNic+"' AND order_menu_id='"+menu_id+"' AND order_des='"+orderDescription+"' AND order_date='"+day+"'";
            
            try
            {
                ps = con.prepareStatement(sql1);//add order details to database
                ps.execute();
                ps = con.prepareStatement(sql2);//get the order id
                rs = ps.executeQuery();
                if (rs.next())
                {
                    order_id= rs.getString("restaurant_order_id");
                    String sql3 = "INSERT INTO restaurant_roomCustomerOrder_payment VALUES('"+customerNic+"','"+order_id+"','"+paymentAmount+"')";
                    ps = con.prepareStatement(sql3);//add the existing customer order amount
                    ps.execute();
                }
                
                JOptionPane.showMessageDialog(null,"Order Added!","Success",JOptionPane.INFORMATION_MESSAGE);                
                resetOrderOfExistingCustomerButton.doClick();
                resetOrderButton.doClick();
                contentPanel.setVisible(false);
            }
            catch(Exception ex)
            {
               System.out.println(ex);
            }
        }
    }//GEN-LAST:event_addOrderOfExistingCustomerButtonActionPerformed

    private void resetOrderOfExistingCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetOrderOfExistingCustomerButtonActionPerformed
        // TODO add your handling code here:
        existingCustomerNicTextField.setText("");
        existingCustomerNameTextField.setText("");
        orderAmountTextField.setText("");
    }//GEN-LAST:event_resetOrderOfExistingCustomerButtonActionPerformed

    private void demoOrderOfExistingCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoOrderOfExistingCustomerButtonActionPerformed
        // TODO add your handling code here:
        existingCustomerNicTextField.setText("948602920");
    }//GEN-LAST:event_demoOrderOfExistingCustomerButtonActionPerformed

    private void goBackToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackToOrderButtonActionPerformed
        // TODO add your handling code here:
        //redirecting to Add Payment from Add Customer
            contentPanel.setVisible(true);
            restaurantOrderPanel.setVisible(true);
            addOrderPanel.setVisible(true);
            updateOrderPanel.setVisible(false);
            removeOrderPanel.setVisible(false);
            searchOrderPanel.setVisible(false);
            customerPanel.setVisible(false);
            restaurantPaymentPanel.setVisible(false);
            menuPanel.setVisible(false);
            otherOrderPanel.setVisible(false);
            employeePanel.setVisible(false);
            orderStockPanel.setVisible(false);
            maintenancePanel.setVisible(false);
            reportsPanel.setVisible(false);
        
    }//GEN-LAST:event_goBackToOrderButtonActionPerformed

    private void orderAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderAmountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderAmountTextFieldActionPerformed

    private void existingCustomerOrderMenuIdTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerOrderMenuIdTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_existingCustomerOrderMenuIdTextFieldKeyPressed

    private void existingCustomerOrderMenuIdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerOrderMenuIdTextFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_existingCustomerOrderMenuIdTextFieldKeyReleased

    private void existingCustomerOrderMenuIdTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_existingCustomerOrderMenuIdTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_existingCustomerOrderMenuIdTextFieldKeyTyped

    private void searchCustomerToUpdateTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCustomerToUpdateTextFieldKeyReleased
        // TODO add your handling code here:
        if(searchCustomerToUpdateTextField.getText().length()==10)
        {
            if(isNICValid(searchCustomerToUpdateTextField.getText()+"V"))
            {       
                
                if((evt.getKeyCode()==KeyEvent.VK_ENTER)|| (evt.getKeyCode()==KeyEvent.VK_TAB))
                {
                    searchCustomerToUpdateTextField.setBackground(new Color(255, 255, 255));
                    searchCustomerToUpdateButton.doClick();
                }    
               
            }
        }
    }//GEN-LAST:event_searchCustomerToUpdateTextFieldKeyReleased

    private void searchCustomerToUpdateTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCustomerToUpdateTextFieldKeyTyped
        // TODO add your handling code here:
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        
        if(searchCustomerToUpdateTextField.getText().length()>=9)
        {
            evt.consume();
        }
    }//GEN-LAST:event_searchCustomerToUpdateTextFieldKeyTyped

    private void searchCustomerToUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerToUpdateButtonActionPerformed
        // TODO add your handling code here:
        String cusnic = searchCustomerToUpdateTextField.getText()+"V";
        //validating the cusnic
        if(isNICValid(cusnic))
        {
            String sql = "SELECT restaurant_customer_nic AS 'Customer NIC', restaurant_customer_name AS 'Customer Name', restaurant_customer_telephone AS 'Customer Telephone', restaurant_customer_email AS 'Customer Email' FROM restaurant_customer WHERE restaurant_customer_nic = '" + cusnic + "'";
            System.out.println(sql);
            try 
            {
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                searchCustomerToUpdateTable.setModel(DbUtils.resultSetToTableModel(rs)); //loading the query results
                if(searchCustomerToUpdateTable.getRowCount()==0)
                {
                    JOptionPane.showMessageDialog(null,"No Such Record!","Information",JOptionPane.INFORMATION_MESSAGE);
                }
            } 
            catch (SQLException ex) 
            {
                System.out.println(ex);
            }

            
        }
        else 
        {
            JOptionPane.showMessageDialog(null,"Invalid NIC!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchCustomerToUpdateButtonActionPerformed

    private void updateCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerButtonActionPerformed
        // TODO add your handling code here:
        String nic = searchCustomerToUpdateTextField.getText()+"V";   
    
        int chlen = nic.length();
        
        if(isNICValid(nic) && (chlen==10))
        {
           int r = searchCustomerToUpdateTable.getSelectedRow(); 
           String name = searchCustomerToUpdateTable.getValueAt(r,1).toString();
           String tp = searchCustomerToUpdateTable.getValueAt(r,2).toString();
           String mail =searchCustomerToUpdateTable.getValueAt(r,3).toString();

           int b = JOptionPane.showConfirmDialog(null,"Are you sure?","Confirm Update",JOptionPane.YES_NO_OPTION);

            if(b ==0)
            {   
                String sql = "UPDATE restaurant_customer SET restaurant_customer_name = '"+name+"', restaurant_customer_telephone = '"+tp+"', restaurant_customer_email = '"+mail+"' WHERE restaurant_customer_nic  = '"+nic+"'";  
                try 
                {
                    ps = con.prepareStatement(sql);
                    ps.execute();
                    JOptionPane.showMessageDialog(null,"Customer Information Updated","Success",JOptionPane.INFORMATION_MESSAGE);

                } 
                catch (SQLException ex) 
                {
                    System.out.println(ex);
                    JOptionPane.showMessageDialog(null,"Unable to update", "Warning",JOptionPane.WARNING_MESSAGE);                 
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Update Cancelled!","Success",JOptionPane.INFORMATION_MESSAGE);
            }

        }    
        else
        {
            JOptionPane.showMessageDialog(null,"Invalid Data", "Warning",JOptionPane.WARNING_MESSAGE); 
        }
    }//GEN-LAST:event_updateCustomerButtonActionPerformed

    private void searchCustomerToUpdateDemoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerToUpdateDemoButtonActionPerformed
        // TODO add your handling code here:
        searchCustomerToUpdateTextField.setText("918944547");
    }//GEN-LAST:event_searchCustomerToUpdateDemoButtonActionPerformed

    private void searchCustomerToUpdateResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerToUpdateResetButtonActionPerformed
        // TODO add your handling code here:
        searchCustomerToUpdateTextField.setText("");       
        searchCustomerToUpdateTable = new javax.swing.JTable();

        searchCustomerToUpdateTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
        ));

        searchCustomerToUpdateTablejScrollPane.setViewportView(searchCustomerToUpdateTable);
    }//GEN-LAST:event_searchCustomerToUpdateResetButtonActionPerformed

    private void searchCustomerResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerResetButtonActionPerformed
        // TODO add your handling code here:
        searchCustomerTextField.setText("");
        searchCustomerTable= new javax.swing.JTable();
        searchCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
        ));

        searchCustomerTablejScrollPane.setViewportView(searchCustomerTable);
    }//GEN-LAST:event_searchCustomerResetButtonActionPerformed

    private void searchCustomerDemoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerDemoButtonActionPerformed
        // TODO add your handling code here:
        searchCustomerTextField.setText("933954547");
    }//GEN-LAST:event_searchCustomerDemoButtonActionPerformed

    private void removeMenuSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuSearchButtonActionPerformed
        // TODO add your handling code here:
        String id = removeMenuIdComboBox.getSelectedItem().toString();
    
        if(removeMenuIdComboBox.getSelectedIndex()==0)
        {
             JOptionPane.showMessageDialog(null,"Select Menu Id", "Warning",JOptionPane.WARNING_MESSAGE); 
        }    
        else 
        {

            int n = JOptionPane.showConfirmDialog(null,"Are you sure?","Confirm Remove",JOptionPane.YES_NO_OPTION);

            if(n==0)
            { 
                String sql = "UPDATE menu SET menu_status = '0' WHERE menu_id = '"+id+"'";
                try
                {
                    ps = con.prepareStatement(sql);
                    ps.execute();
                    JOptionPane.showMessageDialog(null,"Success","Success",JOptionPane.INFORMATION_MESSAGE); 

                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null,"Data Retrieval Error!","Error",JOptionPane.ERROR_MESSAGE);  
                }    


            }
            else
            {
                
                JOptionPane.showMessageDialog(null,"Update Cancelled","Warning",JOptionPane.WARNING_MESSAGE);  

            }    



        }
    }//GEN-LAST:event_removeMenuSearchButtonActionPerformed

    private void viewRoomServiceOrdersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRoomServiceOrdersButtonActionPerformed
        // TODO add your handling code here:
        roomServiceOrderIdTextField.setText("");    
        String sql = "SELECT * FROM room_roomserviceorders WHERE room_restaurant_status = 0";
        System.out.println(sql);
        try 
        {
            ps = con.prepareStatement(sql);
            rs= ps.executeQuery();
            roomOrdersTable.setModel(DbUtils.resultSetToTableModel(rs)); //loading the query results */
        } 
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_viewRoomServiceOrdersButtonActionPerformed

    private void roomOrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomOrdersTableMouseClicked
        // TODO add your handling code here:
        //set the orderid textbox to the selected order in the table
        int r=roomOrdersTable.getSelectedRow();
        String roomOrderid=roomOrdersTable.getValueAt(r, 0).toString();
        roomServiceOrderIdTextField.setText(roomOrderid);
        
    }//GEN-LAST:event_roomOrdersTableMouseClicked

    private void printEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printEmployeeButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_printEmployeeButtonActionPerformed

    private void roomOrdersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomOrdersMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        otherOrderPanel.setVisible(true);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(false);
    }//GEN-LAST:event_roomOrdersMenuItemActionPerformed

    private void paymentAmountTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentAmountTextFieldKeyTyped
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_paymentAmountTextFieldKeyTyped

    private void paymentPaidAmountTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentPaidAmountTextFieldKeyTyped
        // TODO add your handling code here:
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(paymentPaidAmountTextField.getText().length()>=5)
        {
            evt.consume();
        }
    }//GEN-LAST:event_paymentPaidAmountTextFieldKeyTyped

    private void itemIdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemIdComboBoxActionPerformed

        String item = itemIdComboBox.getSelectedItem().toString();

        String sql;
        try
        {
            sql = "select i.item_name as 'itemname', c.item_category_name as 'itemcatname' from item i,item_category c where i.item_id = '"+item+"' AND i.item_category = c.item_category_id";
            ps= con.prepareStatement(sql);
            rs = ps.executeQuery();
            String itemname;
            String category;

            while(rs.next())
            {
                itemname = rs.getString("itemname");
                itemNameComboBox.setSelectedItem(itemname);
                category = rs.getString("itemcatname");
                itemCategorycomboBox.setSelectedItem(category);

            }

        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Error!","Error",JOptionPane.ERROR_MESSAGE);

        }

        String sql1 = "select item_units as 'Units' from item where item_id = '"+item+"'";
        try
        {
            ps= con.prepareStatement(sql1);
            rs = ps.executeQuery();
            //data to addStockPurchaseItemCategoryComboBox
            String units;
            while(rs.next()){
                units = rs.getString("Units");
                unitsOrderTextField.setText(units);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Error!","Error",JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_itemIdComboBoxActionPerformed

    private void itemNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameComboBoxActionPerformed
        /*String name = jComboBox2.getSelectedItem().toString();

        String sql;
        try
        {
            sql = "select item_id,item_category from item where item_name = '"+name+"'";
            pre= conn.prepareStatement(sql);
            rs = pre.executeQuery();
            String itemid;
            String category;

            while(rs.next())
            {
                itemid = rs.getString("item_id");
                jComboBox1.setSelectedItem(itemid);
                category = rs.getString("item_category");
                jComboBox3.setSelectedItem(category);

            }

        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Error!","Error",JOptionPane.ERROR_MESSAGE);

        }*/
    }//GEN-LAST:event_itemNameComboBoxActionPerformed

    private void departmentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departmentTextFieldActionPerformed

    private void itemCategorycomboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCategorycomboBoxActionPerformed

    }//GEN-LAST:event_itemCategorycomboBoxActionPerformed

    private void orderQtyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderQtyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderQtyTextFieldActionPerformed

    private void orderQtyTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderQtyTextFieldKeyReleased
        if((evt.getKeyCode()==KeyEvent.VK_ENTER)|| (evt.getKeyCode()==KeyEvent.VK_TAB))
        {
            int x = Integer.parseInt(orderQtyTextField.getText());
              String level;
                String sql = "select item_reorder_level as 'level' from item where item_availability = 'available'";
                try
                {
                    ps= con.prepareStatement(sql);
                    rs = ps.executeQuery();

                    while(rs.next())
                    {
                        level = rs.getString("level");
                        if((Integer.parseInt(level)) < x)
                        {
                            jLabel18.setVisible(true);
                            jLabel18.setForeground(Color.red);
                            jLabel18.setText("Not Available");
                            jButton2.setEnabled(false);
                        }
                        else
                        {
                            orderQtyTextField.setBackground(Color.white);
                            jLabel18.setVisible(true);
                            jLabel18.setForeground(new Color(51,204,0));
                            jLabel18.setText("Available");
                            jButton2.setEnabled(true);
                        }

                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null,"No Such Record!","Error",JOptionPane.ERROR_MESSAGE);
                }
            
            
        }
    }//GEN-LAST:event_orderQtyTextFieldKeyReleased

    private void orderQtyTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderQtyTextFieldKeyTyped
        //check whether quantity is valid
        if(!Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        if(orderQtyTextField.getText().length()>=3)
        {
            evt.consume();
        }
        
        
    }//GEN-LAST:event_orderQtyTextFieldKeyTyped

    private void maintenanceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintenanceMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(true);
        maintenanceRequestPanel.setVisible(true);
        reportsPanel.setVisible(false);
    }//GEN-LAST:event_maintenanceMenuItemActionPerformed

    private void reportsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsMenuItemActionPerformed
        // TODO add your handling code here:
        contentPanel.setVisible(true);
        restaurantOrderPanel.setVisible(false);
        customerPanel.setVisible(false);
        menuPanel.setVisible(false);
        otherOrderPanel.setVisible(false);
        restaurantPaymentPanel.setVisible(false);
        employeePanel.setVisible(false);
        orderStockPanel.setVisible(false);
        maintenancePanel.setVisible(false);
        reportsPanel.setVisible(true);
        
    }//GEN-LAST:event_reportsMenuItemActionPerformed

    private void clearRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRequestButtonActionPerformed
        //clear the details already there
        itemIdComboBox.setSelectedIndex(0);
        itemNameComboBox.setSelectedIndex(0);
        itemCategorycomboBox.setSelectedIndex(0);
        orderQtyTextField.setText("");
        unitsOrderTextField.setText("");
        
    }//GEN-LAST:event_clearRequestButtonActionPerformed

    private void requestStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestStockButtonActionPerformed
        //request order
        
        
    }//GEN-LAST:event_requestStockButtonActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Restaurant_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Restaurant_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Restaurant_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Restaurant_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Restaurant_Manager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addCustomerMenuItem;
    private javax.swing.JPanel addCustomerPanel;
    private javax.swing.JButton addFoodItemsButton;
    private javax.swing.JMenuItem addMenuMenuItem;
    private javax.swing.JPanel addMenuPanel;
    private javax.swing.JButton addNewFoodItemButton;
    private javax.swing.JButton addNewMenuButton;
    private javax.swing.JButton addNewMenuItemButton;
    private javax.swing.JMenuItem addOrderMenuItem;
    private javax.swing.JButton addOrderOfExistingCustomerButton;
    private javax.swing.JPanel addOrderPanel;
    private javax.swing.JButton addUpdatedMenuItemButton;
    private javax.swing.JTextField areaCodeTextField;
    private javax.swing.JButton changeStatusOfRoomOrderButton;
    private javax.swing.JCheckBox checkTokenCheckBox;
    private javax.swing.JButton clearRequestButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTextField countryCodeTextField;
    private javax.swing.JTextField customerFNameTextField;
    private javax.swing.JTextField customerLNameTextField;
    private javax.swing.JMenu customerMenu;
    private javax.swing.JTextField customerNicTextField;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JButton demoAddCustomerButton;
    private javax.swing.JButton demoOrderOfExistingCustomerButton;
    private javax.swing.JTextField departmentTextField;
    private javax.swing.JTextField eMailTextField;
    private javax.swing.JTextField employeeIdTextField;
    private javax.swing.JTable employeeInfoTable;
    private javax.swing.JPanel employeePanel;
    private javax.swing.JTextField existingCustomerNameTextField;
    private javax.swing.JTextField existingCustomerNicTextField;
    private javax.swing.JTextArea existingCustomerOrderDescriptionTextArea;
    private javax.swing.JTextField existingCustomerOrderMenuIdTextField;
    private javax.swing.JTable foodItemsTable;
    private javax.swing.JTable foodItemsToUpdateTable;
    private javax.swing.JButton goBackToOrderButton;
    private javax.swing.JComboBox<String> itemCategorycomboBox;
    private javax.swing.JComboBox<String> itemIdComboBox;
    private javax.swing.JComboBox<String> itemNameComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JDesktopPane mainPane;
    private javax.swing.JMenuItem maintenanceMenuItem;
    private javax.swing.JPanel maintenancePanel;
    private javax.swing.JPanel maintenanceRequestPanel;
    private javax.swing.JTextArea menuDescriptionTextArea;
    private javax.swing.JComboBox<String> menuIdComboBox;
    private javax.swing.JLabel menuIdUpdateLabel;
    private javax.swing.JComboBox<String> menuIdsComboBox;
    private javax.swing.JScrollPane menuItemsScrollPane;
    private javax.swing.JTable menuItemsTable;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JTextField menuPriceTextField;
    private javax.swing.JList<String> newMenuItemsList;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextField orderAmountTextField;
    private javax.swing.JList<String> orderItemsList;
    private javax.swing.JList<String> orderNewItemsList;
    private javax.swing.JScrollPane orderNewItemsScrollPane;
    private javax.swing.JTable orderNewItemsTable;
    private javax.swing.JTextField orderQtyTextField;
    private javax.swing.JTable orderSearchTable;
    private javax.swing.JPanel orderStockPanel;
    private javax.swing.JPanel otherOrderPanel;
    private javax.swing.JTextField paymentAmountTextField;
    private javax.swing.JTextField paymentBalanceTextField;
    private javax.swing.JButton paymentDoneButton;
    private javax.swing.JLabel paymentMenuIdLabel;
    private javax.swing.JComboBox<String> paymentMethodComboBox;
    private javax.swing.JTextArea paymentOrderDescriptionTextArea;
    private javax.swing.JTextField paymentPaidAmountTextField;
    private javax.swing.JTextField phonePart1TextField;
    private javax.swing.JTextField phonePart2TextField;
    private javax.swing.JButton printBillButton;
    private javax.swing.JButton printEmployeeButton;
    private javax.swing.JButton proceedOrderButton;
    private javax.swing.JButton removeFoodItemButton;
    private javax.swing.JComboBox<String> removeMenuIdComboBox;
    private javax.swing.JMenuItem removeMenuMenuItem;
    private javax.swing.JPanel removeMenuPanel;
    private javax.swing.JButton removeMenuSearchButton;
    private javax.swing.JButton removeNewFoodItemButton;
    private javax.swing.JButton removeNewMenuItemButton;
    private javax.swing.JButton removeOrderButton;
    private javax.swing.JMenuItem removeOrderMenuItem;
    private javax.swing.JPanel removeOrderPanel;
    private javax.swing.JTable removeOrderTable;
    private javax.swing.JButton removeUpdatedMenuItemButton;
    private javax.swing.JMenuItem reportsMenuItem;
    private javax.swing.JPanel reportsPanel;
    private javax.swing.JButton requestStockButton;
    private javax.swing.JMenuItem requestStockMenuItem;
    private javax.swing.JButton resetAddNewMenuButton;
    private javax.swing.JButton resetEmployeeButton;
    private javax.swing.JButton resetOrderButton;
    private javax.swing.JButton resetOrderOfExistingCustomerButton;
    private javax.swing.JButton resetRemoveButton;
    private javax.swing.JButton resetUpdatedMenuButton;
    private javax.swing.JMenu restaurantOrderMenu;
    private javax.swing.JPanel restaurantOrderPanel;
    private javax.swing.JPanel restaurantPaymentPanel;
    private javax.swing.JPanel roomCustomerPanel;
    private javax.swing.JPanel roomOrderPanel;
    private javax.swing.JMenuItem roomOrdersMenuItem;
    private javax.swing.JTable roomOrdersTable;
    private javax.swing.JTextField roomServiceOrderIdTextField;
    private javax.swing.JButton searchAllEmployeesButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchCustomerButton;
    private javax.swing.JButton searchCustomerDemoButton;
    private javax.swing.JMenuItem searchCustomerMenuItem;
    private javax.swing.JPanel searchCustomerPanel;
    private javax.swing.JButton searchCustomerResetButton;
    private javax.swing.JTable searchCustomerTable;
    private javax.swing.JScrollPane searchCustomerTablejScrollPane;
    private javax.swing.JTextField searchCustomerTextField;
    private javax.swing.JButton searchCustomerToUpdateButton;
    private javax.swing.JButton searchCustomerToUpdateDemoButton;
    private javax.swing.JButton searchCustomerToUpdateResetButton;
    private javax.swing.JTable searchCustomerToUpdateTable;
    private javax.swing.JScrollPane searchCustomerToUpdateTablejScrollPane;
    private javax.swing.JTextField searchCustomerToUpdateTextField;
    private javax.swing.JTextField searchOrderIdTextField;
    private javax.swing.JMenuItem searchOrderMenuItem;
    private javax.swing.JTextField searchOrderNicTextField;
    private javax.swing.JPanel searchOrderPanel;
    private javax.swing.JButton searchOrderReserButton;
    private javax.swing.JScrollPane searchOrderScrollPane;
    private javax.swing.JButton searchRemoveButton;
    private javax.swing.JTextField searchRemoveOrderIdTextField;
    private javax.swing.JButton searchSingleEmployeeButton;
    private javax.swing.JButton searchUpdateButton;
    private javax.swing.JTextField searchUpdateOrderIdTextField;
    private javax.swing.JPanel stockOrderPanel;
    private javax.swing.JTextField unitsOrderTextField;
    private javax.swing.JButton updateCustomerButton;
    private javax.swing.JMenuItem updateCustomerMenuItem;
    private javax.swing.JPanel updateCustomerPanel;
    private javax.swing.JButton updateMenuButton;
    private javax.swing.JComboBox<String> updateMenuMenuIdComboBox;
    private javax.swing.JMenuItem updateMenuMenuItem;
    private javax.swing.JPanel updateMenuPanel;
    private javax.swing.JButton updateOrderButton;
    private javax.swing.JMenuItem updateOrderMenuItem;
    private javax.swing.JPanel updateOrderPanel;
    private javax.swing.JTable updateOrderTable;
    private javax.swing.JTextArea updatedMenuDescriptionTextArea;
    private javax.swing.JList<String> updatedMenuItemsList;
    private javax.swing.JTextField updatedMenuPriceTextField;
    private javax.swing.JButton viewMenuButton;
    private javax.swing.JComboBox<String> viewMenuIdComboBox;
    private javax.swing.JList<String> viewMenuList;
    private javax.swing.JMenuItem viewMenuMenuItem;
    private javax.swing.JPanel viewMenuPanel;
    private javax.swing.JTextField viewMenuPriceTextField;
    private javax.swing.JButton viewMenuResetButton;
    private javax.swing.JTextField viewMenuStatusTextField;
    private javax.swing.JButton viewRoomServiceOrdersButton;
    // End of variables declaration//GEN-END:variables
}
